"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hash;
/* eslint-disable unicorn/number-literal-case */
// murmurhash2 via https://gist.github.com/raycmorgan/588423

function hash(str) {
  return murmurhash2(str, str.length).toString(36);
}

function murmurhash2(str, seed) {
  var m = 0x5bd1e995;
  var r = 24;
  var h = seed ^ str.length;
  var length = str.length;
  var currentIndex = 0;

  while (length >= 4) {
    var k = uint32(str, currentIndex);

    k = umul32(k, m);
    k ^= k >>> r;
    k = umul32(k, m);

    h = umul32(h, m);
    h ^= k;

    currentIndex += 4;
    length -= 4;
  }

  switch (length) {
    case 3:
      h ^= uint16(str, currentIndex);
      h ^= str.charCodeAt(currentIndex + 2) << 16;
      h = umul32(h, m);
      break;

    case 2:
      h ^= uint16(str, currentIndex);
      h = umul32(h, m);
      break;

    case 1:
      h ^= str.charCodeAt(currentIndex);
      h = umul32(h, m);
      break;

    default:
  }

  h ^= h >>> 13;
  h = umul32(h, m);
  h ^= h >>> 15;

  return h >>> 0;
}

function uint32(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
}

function uint16(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
}

function umul32(n, m) {
  n |= 0;
  m |= 0;
  var nlo = n & 0xffff;
  var nhi = n >>> 16;
  var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;
  return res;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYXNoLmpzIl0sIm5hbWVzIjpbImhhc2giLCJzdHIiLCJtdXJtdXJoYXNoMiIsImxlbmd0aCIsInRvU3RyaW5nIiwic2VlZCIsIm0iLCJyIiwiaCIsImN1cnJlbnRJbmRleCIsImsiLCJ1aW50MzIiLCJ1bXVsMzIiLCJ1aW50MTYiLCJjaGFyQ29kZUF0IiwicG9zIiwibiIsIm5sbyIsIm5oaSIsInJlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBR3dCQSxJO0FBSHhCO0FBQ0E7O0FBRWUsU0FBU0EsSUFBVCxDQUFjQyxHQUFkLEVBQW1CO0FBQ2hDLFNBQU9DLFlBQVlELEdBQVosRUFBaUJBLElBQUlFLE1BQXJCLEVBQTZCQyxRQUE3QixDQUFzQyxFQUF0QyxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0YsV0FBVCxDQUFxQkQsR0FBckIsRUFBMEJJLElBQTFCLEVBQWdDO0FBQzlCLE1BQU1DLElBQUksVUFBVjtBQUNBLE1BQU1DLElBQUksRUFBVjtBQUNBLE1BQUlDLElBQUlILE9BQU9KLElBQUlFLE1BQW5CO0FBQ0EsTUFBSUEsU0FBU0YsSUFBSUUsTUFBakI7QUFDQSxNQUFJTSxlQUFlLENBQW5COztBQUVBLFNBQU9OLFVBQVUsQ0FBakIsRUFBb0I7QUFDbEIsUUFBSU8sSUFBSUMsT0FBT1YsR0FBUCxFQUFZUSxZQUFaLENBQVI7O0FBRUFDLFFBQUlFLE9BQU9GLENBQVAsRUFBVUosQ0FBVixDQUFKO0FBQ0FJLFNBQUtBLE1BQU1ILENBQVg7QUFDQUcsUUFBSUUsT0FBT0YsQ0FBUCxFQUFVSixDQUFWLENBQUo7O0FBRUFFLFFBQUlJLE9BQU9KLENBQVAsRUFBVUYsQ0FBVixDQUFKO0FBQ0FFLFNBQUtFLENBQUw7O0FBRUFELG9CQUFnQixDQUFoQjtBQUNBTixjQUFVLENBQVY7QUFDRDs7QUFFRCxVQUFRQSxNQUFSO0FBQ0UsU0FBSyxDQUFMO0FBQ0VLLFdBQUtLLE9BQU9aLEdBQVAsRUFBWVEsWUFBWixDQUFMO0FBQ0FELFdBQUtQLElBQUlhLFVBQUosQ0FBZUwsZUFBZSxDQUE5QixLQUFvQyxFQUF6QztBQUNBRCxVQUFJSSxPQUFPSixDQUFQLEVBQVVGLENBQVYsQ0FBSjtBQUNBOztBQUVGLFNBQUssQ0FBTDtBQUNFRSxXQUFLSyxPQUFPWixHQUFQLEVBQVlRLFlBQVosQ0FBTDtBQUNBRCxVQUFJSSxPQUFPSixDQUFQLEVBQVVGLENBQVYsQ0FBSjtBQUNBOztBQUVGLFNBQUssQ0FBTDtBQUNFRSxXQUFLUCxJQUFJYSxVQUFKLENBQWVMLFlBQWYsQ0FBTDtBQUNBRCxVQUFJSSxPQUFPSixDQUFQLEVBQVVGLENBQVYsQ0FBSjtBQUNBOztBQUVGO0FBakJGOztBQW9CQUUsT0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE1BQUlJLE9BQU9KLENBQVAsRUFBVUYsQ0FBVixDQUFKO0FBQ0FFLE9BQUtBLE1BQU0sRUFBWDs7QUFFQSxTQUFPQSxNQUFNLENBQWI7QUFDRDs7QUFFRCxTQUFTRyxNQUFULENBQWdCVixHQUFoQixFQUFxQmMsR0FBckIsRUFBMEI7QUFDeEIsU0FDRWQsSUFBSWEsVUFBSixDQUFlQyxLQUFmLEtBQ0NkLElBQUlhLFVBQUosQ0FBZUMsS0FBZixLQUF5QixDQUQxQixLQUVDZCxJQUFJYSxVQUFKLENBQWVDLEtBQWYsS0FBeUIsRUFGMUIsS0FHQ2QsSUFBSWEsVUFBSixDQUFlQyxHQUFmLEtBQXVCLEVBSHhCLENBREY7QUFNRDs7QUFFRCxTQUFTRixNQUFULENBQWdCWixHQUFoQixFQUFxQmMsR0FBckIsRUFBMEI7QUFDeEIsU0FBT2QsSUFBSWEsVUFBSixDQUFlQyxLQUFmLEtBQXlCZCxJQUFJYSxVQUFKLENBQWVDLEtBQWYsS0FBeUIsQ0FBbEQsQ0FBUDtBQUNEOztBQUVELFNBQVNILE1BQVQsQ0FBZ0JJLENBQWhCLEVBQW1CVixDQUFuQixFQUFzQjtBQUNwQlUsT0FBSyxDQUFMO0FBQ0FWLE9BQUssQ0FBTDtBQUNBLE1BQU1XLE1BQU1ELElBQUksTUFBaEI7QUFDQSxNQUFNRSxNQUFNRixNQUFNLEVBQWxCO0FBQ0EsTUFBTUcsTUFBT0YsTUFBTVgsQ0FBTixJQUFXLENBQUVZLE1BQU1aLENBQVAsR0FBWSxNQUFiLEtBQXdCLEVBQW5DLENBQUQsR0FBMkMsQ0FBdkQ7QUFDQSxTQUFPYSxHQUFQO0FBQ0QiLCJmaWxlIjoiaGFzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHVuaWNvcm4vbnVtYmVyLWxpdGVyYWwtY2FzZSAqL1xuLy8gbXVybXVyaGFzaDIgdmlhIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3JheWNtb3JnYW4vNTg4NDIzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHJldHVybiBtdXJtdXJoYXNoMihzdHIsIHN0ci5sZW5ndGgpLnRvU3RyaW5nKDM2KVxufVxuXG5mdW5jdGlvbiBtdXJtdXJoYXNoMihzdHIsIHNlZWQpIHtcbiAgY29uc3QgbSA9IDB4NWJkMWU5OTVcbiAgY29uc3QgciA9IDI0XG4gIGxldCBoID0gc2VlZCBeIHN0ci5sZW5ndGhcbiAgbGV0IGxlbmd0aCA9IHN0ci5sZW5ndGhcbiAgbGV0IGN1cnJlbnRJbmRleCA9IDBcblxuICB3aGlsZSAobGVuZ3RoID49IDQpIHtcbiAgICBsZXQgayA9IHVpbnQzMihzdHIsIGN1cnJlbnRJbmRleClcblxuICAgIGsgPSB1bXVsMzIoaywgbSlcbiAgICBrIF49IGsgPj4+IHJcbiAgICBrID0gdW11bDMyKGssIG0pXG5cbiAgICBoID0gdW11bDMyKGgsIG0pXG4gICAgaCBePSBrXG5cbiAgICBjdXJyZW50SW5kZXggKz0gNFxuICAgIGxlbmd0aCAtPSA0XG4gIH1cblxuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gdWludDE2KHN0ciwgY3VycmVudEluZGV4KVxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChjdXJyZW50SW5kZXggKyAyKSA8PCAxNlxuICAgICAgaCA9IHVtdWwzMihoLCBtKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gdWludDE2KHN0ciwgY3VycmVudEluZGV4KVxuICAgICAgaCA9IHVtdWwzMihoLCBtKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoY3VycmVudEluZGV4KVxuICAgICAgaCA9IHVtdWwzMihoLCBtKVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gIH1cblxuICBoIF49IGggPj4+IDEzXG4gIGggPSB1bXVsMzIoaCwgbSlcbiAgaCBePSBoID4+PiAxNVxuXG4gIHJldHVybiBoID4+PiAwXG59XG5cbmZ1bmN0aW9uIHVpbnQzMihzdHIsIHBvcykge1xuICByZXR1cm4gKFxuICAgIHN0ci5jaGFyQ29kZUF0KHBvcysrKSArXG4gICAgKHN0ci5jaGFyQ29kZUF0KHBvcysrKSA8PCA4KSArXG4gICAgKHN0ci5jaGFyQ29kZUF0KHBvcysrKSA8PCAxNikgK1xuICAgIChzdHIuY2hhckNvZGVBdChwb3MpIDw8IDI0KVxuICApXG59XG5cbmZ1bmN0aW9uIHVpbnQxNihzdHIsIHBvcykge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQocG9zKyspICsgKHN0ci5jaGFyQ29kZUF0KHBvcysrKSA8PCA4KVxufVxuXG5mdW5jdGlvbiB1bXVsMzIobiwgbSkge1xuICBuIHw9IDBcbiAgbSB8PSAwXG4gIGNvbnN0IG5sbyA9IG4gJiAweGZmZmZcbiAgY29uc3QgbmhpID0gbiA+Pj4gMTZcbiAgY29uc3QgcmVzID0gKG5sbyAqIG0gKyAoKChuaGkgKiBtKSAmIDB4ZmZmZikgPDwgMTYpKSB8IDBcbiAgcmV0dXJuIHJlc1xufVxuIl19