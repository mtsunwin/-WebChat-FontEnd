var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Transition from 'react-transition-group/Transition';
import { Portal } from '../../portal';
import getPosition from './getPosition';
import Position from './Position';

var animationEasing = {
  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'
};

var initialState = function initialState() {
  return {
    top: null,
    left: null,
    transformOrigin: null
  };
};

var getCSS = function getCSS(_ref) {
  var initialScale = _ref.initialScale,
      animationDuration = _ref.animationDuration;
  return {
    position: 'fixed',
    opacity: 0,
    transitionTimingFunction: animationEasing.spring,
    transitionDuration: animationDuration + 'ms',
    transitionProperty: 'opacity, transform',
    transform: 'scale(' + initialScale + ') translateY(-1px)',
    '&[data-state="entering"], &[data-state="entered"]': {
      opacity: 1,
      visibility: 'visible',
      transform: 'scale(1)'
    },
    '&[data-state="exiting"]': {
      opacity: 0,
      transform: 'scale(1)'
    }
  };
};

var Positioner = function (_PureComponent) {
  _inherits(Positioner, _PureComponent);

  function Positioner(props, context) {
    _classCallCheck(this, Positioner);

    var _this = _possibleConstructorReturn(this, (Positioner.__proto__ || Object.getPrototypeOf(Positioner)).call(this, props, context));

    _this.getTargetRef = function (ref) {
      _this.targetRef = ref;
    };

    _this.getRef = function (ref) {
      _this.positionerRef = ref;
      _this.props.innerRef(ref);
    };

    _this.handleEnter = function () {
      _this.update();
    };

    _this.getTargetRect = function () {
      return _this.targetRef.getBoundingClientRect();
    };

    _this.update = function () {
      if (!_this.props.isShown || !_this.targetRef || !_this.positionerRef) return;

      var targetRect = _this.getTargetRect();
      var viewportHeight = document.documentElement.clientHeight + window.scrollY;
      var viewportWidth = document.documentElement.clientWidth + window.scrollX;

      var _getPosition = getPosition({
        position: _this.props.position,
        targetRect: targetRect,
        targetOffset: _this.props.targetOffset,
        dimensions: {
          height: _this.positionerRef.offsetHeight,
          width: _this.positionerRef.offsetWidth
        },
        viewport: {
          width: viewportWidth,
          height: viewportHeight
        },
        viewportOffset: _this.props.bodyOffset
      }),
          rect = _getPosition.rect,
          transformOrigin = _getPosition.transformOrigin;

      _this.setState({
        left: rect.left,
        top: rect.top,
        transformOrigin: transformOrigin
      }, function () {
        window.requestAnimationFrame(function () {
          _this.update();
        });
      });
    };

    _this.handleExited = function () {
      _this.setState(function () {
        return _extends({}, initialState());
      }, function () {
        _this.props.onCloseComplete();
      });
    };

    _this.state = initialState();
    return _this;
  }

  _createClass(Positioner, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          zIndex = _props.zIndex,
          target = _props.target,
          isShown = _props.isShown,
          children = _props.children,
          initialScale = _props.initialScale,
          targetOffset = _props.targetOffset,
          animationDuration = _props.animationDuration;
      var _state = this.state,
          left = _state.left,
          top = _state.top,
          transformOrigin = _state.transformOrigin;


      return React.createElement(
        React.Fragment,
        null,
        target({ getRef: this.getTargetRef, isShown: isShown }),
        React.createElement(
          Portal,
          null,
          React.createElement(
            Transition,
            {
              'in': isShown,
              timeout: animationDuration,
              onEnter: this.handleEnter,
              onEntered: this.props.onOpenComplete,
              onExited: this.handleExited,
              unmountOnExit: true
            },
            function (state) {
              return children({
                top: top,
                left: left,
                state: state,
                zIndex: zIndex,
                css: getCSS({ targetOffset: targetOffset, initialScale: initialScale, animationDuration: animationDuration }),
                style: {
                  transformOrigin: transformOrigin,
                  left: left,
                  top: top,
                  zIndex: zIndex
                },
                getRef: _this2.getRef,
                animationDuration: animationDuration
              });
            }
          )
        )
      );
    }
  }]);

  return Positioner;
}(PureComponent);

Positioner.propTypes = {
  /**
   * The position the element that is being positioned is on.
   * Smart positioning might override this.
   */
  position: PropTypes.oneOf(Object.keys(Position)).isRequired,

  /**
   * When true, show the element being positioned.
   */
  isShown: PropTypes.bool,

  /**
   * Function that returns the element being positioned.
   */
  children: PropTypes.func.isRequired,

  /**
   * Function that returns the ref of the element being positioned.
   */
  innerRef: PropTypes.func.isRequired,

  /**
   * The minimum distance from the body to the element being positioned.
   */
  bodyOffset: PropTypes.number.isRequired,

  /**
   * The minimum distance from the target to the element being positioned.
   */
  targetOffset: PropTypes.number.isRequired,

  /**
   * Function that should return a node for the target.
   * ({ getRef: () -> Ref, isShown: Bool }) -> React Node
   */
  target: PropTypes.func.isRequired,

  /**
   * The z-index of the element being positioned.
   */
  zIndex: PropTypes.number.isRequired,

  /**
   * Initial scale of the element being positioned.
   */
  initialScale: PropTypes.number.isRequired,

  /**
   * Duration of the animation.
   */
  animationDuration: PropTypes.number.isRequired,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: PropTypes.func.isRequired,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: PropTypes.func.isRequired
};
Positioner.defaultProps = {
  position: Position.BOTTOM,
  zIndex: 40,
  bodyOffset: 6,
  targetOffset: 6,
  initialScale: 0.9,
  animationDuration: 300,
  innerRef: function innerRef() {},
  onOpenComplete: function onOpenComplete() {},
  onCloseComplete: function onCloseComplete() {}
};
export default Positioner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wb3NpdGlvbmVyL3NyYy9Qb3NpdGlvbmVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlRyYW5zaXRpb24iLCJQb3J0YWwiLCJnZXRQb3NpdGlvbiIsIlBvc2l0aW9uIiwiYW5pbWF0aW9uRWFzaW5nIiwic3ByaW5nIiwiaW5pdGlhbFN0YXRlIiwidG9wIiwibGVmdCIsInRyYW5zZm9ybU9yaWdpbiIsImdldENTUyIsImluaXRpYWxTY2FsZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwicG9zaXRpb24iLCJvcGFjaXR5IiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNmb3JtIiwidmlzaWJpbGl0eSIsIlBvc2l0aW9uZXIiLCJwcm9wcyIsImNvbnRleHQiLCJnZXRUYXJnZXRSZWYiLCJ0YXJnZXRSZWYiLCJyZWYiLCJnZXRSZWYiLCJwb3NpdGlvbmVyUmVmIiwiaW5uZXJSZWYiLCJoYW5kbGVFbnRlciIsInVwZGF0ZSIsImdldFRhcmdldFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc1Nob3duIiwidGFyZ2V0UmVjdCIsInZpZXdwb3J0SGVpZ2h0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJ3aW5kb3ciLCJzY3JvbGxZIiwidmlld3BvcnRXaWR0aCIsImNsaWVudFdpZHRoIiwic2Nyb2xsWCIsInRhcmdldE9mZnNldCIsImRpbWVuc2lvbnMiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwidmlld3BvcnQiLCJ2aWV3cG9ydE9mZnNldCIsImJvZHlPZmZzZXQiLCJyZWN0Iiwic2V0U3RhdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJoYW5kbGVFeGl0ZWQiLCJvbkNsb3NlQ29tcGxldGUiLCJzdGF0ZSIsInpJbmRleCIsInRhcmdldCIsImNoaWxkcmVuIiwib25PcGVuQ29tcGxldGUiLCJjc3MiLCJzdHlsZSIsInByb3BUeXBlcyIsIm9uZU9mIiwiT2JqZWN0Iiwia2V5cyIsImlzUmVxdWlyZWQiLCJib29sIiwiZnVuYyIsIm51bWJlciIsImRlZmF1bHRQcm9wcyIsIkJPVFRPTSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsbUNBQXZCO0FBQ0EsU0FBU0MsTUFBVCxRQUF1QixjQUF2QjtBQUNBLE9BQU9DLFdBQVAsTUFBd0IsZUFBeEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFlBQXJCOztBQUVBLElBQU1DLGtCQUFrQjtBQUN0QkM7QUFEc0IsQ0FBeEI7O0FBSUEsSUFBTUMsZUFBZSxTQUFmQSxZQUFlO0FBQUEsU0FBTztBQUMxQkMsU0FBSyxJQURxQjtBQUUxQkMsVUFBTSxJQUZvQjtBQUcxQkMscUJBQWlCO0FBSFMsR0FBUDtBQUFBLENBQXJCOztBQU1BLElBQU1DLFNBQVMsU0FBVEEsTUFBUztBQUFBLE1BQUdDLFlBQUgsUUFBR0EsWUFBSDtBQUFBLE1BQWlCQyxpQkFBakIsUUFBaUJBLGlCQUFqQjtBQUFBLFNBQTBDO0FBQ3ZEQyxjQUFVLE9BRDZDO0FBRXZEQyxhQUFTLENBRjhDO0FBR3ZEQyw4QkFBMEJYLGdCQUFnQkMsTUFIYTtBQUl2RFcsd0JBQXVCSixpQkFBdkIsT0FKdUQ7QUFLdkRLLHdCQUFvQixvQkFMbUM7QUFNdkRDLDBCQUFvQlAsWUFBcEIsdUJBTnVEO0FBT3ZELHlEQUFxRDtBQUNuREcsZUFBUyxDQUQwQztBQUVuREssa0JBQVksU0FGdUM7QUFHbkREO0FBSG1ELEtBUEU7QUFZdkQsK0JBQTJCO0FBQ3pCSixlQUFTLENBRGdCO0FBRXpCSSxpQkFBVztBQUZjO0FBWjRCLEdBQTFDO0FBQUEsQ0FBZjs7SUFrQnFCRSxVOzs7QUE2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c0NqQjs7O0FBR0FWLFVBQVE1RCxVQUFVeUUsTUFBVixDQUFpQkgsVUF6Q1I7O0FBMkNqQjs7O0FBR0ExRCxnQkFBY1osVUFBVXlFLE1BQVYsQ0FBaUJILFVBOUNkOztBQWdEakI7OztBQUdBekQscUJBQW1CYixVQUFVeUUsTUFBVixDQUFpQkgsVUFuRG5COztBQXFEakI7OztBQUdBWixtQkFBaUIxRCxVQUFVd0UsSUFBVixDQUFlRixVQXhEZjs7QUEwRGpCOzs7QUFHQVAsa0JBQWdCL0QsVUFBVXdFLElBQVYsQ0FBZUY7QUE3RGQsQztBQURBakQsVSxDQWlFWnFELFksR0FBZTtBQUNwQjVELFlBQVVWLFNBQVN1RSxNQURDO0FBRXBCZixVQUFRLEVBRlk7QUFHcEJQLGNBQVksQ0FIUTtBQUlwQlIsZ0JBQWMsQ0FKTTtBQUtwQmpDLGdCQUFjLEdBTE07QUFNcEJDLHFCQUFtQixHQU5DO0FBT3BCZ0IsWUFBVSxvQkFBTSxDQUFFLENBUEU7QUFRcEJrQyxrQkFBZ0IsMEJBQU0sQ0FBRSxDQVJKO0FBU3BCTCxtQkFBaUIsMkJBQU0sQ0FBRTtBQVRMLEM7ZUFqRUhyQyxVIiwiZmlsZSI6IlBvc2l0aW9uZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJ1xuaW1wb3J0IHsgUG9ydGFsIH0gZnJvbSAnLi4vLi4vcG9ydGFsJ1xuaW1wb3J0IGdldFBvc2l0aW9uIGZyb20gJy4vZ2V0UG9zaXRpb24nXG5pbXBvcnQgUG9zaXRpb24gZnJvbSAnLi9Qb3NpdGlvbidcblxuY29uc3QgYW5pbWF0aW9uRWFzaW5nID0ge1xuICBzcHJpbmc6IGBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyMCwgMS4xNzUpYFxufVxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiAoe1xuICB0b3A6IG51bGwsXG4gIGxlZnQ6IG51bGwsXG4gIHRyYW5zZm9ybU9yaWdpbjogbnVsbFxufSlcblxuY29uc3QgZ2V0Q1NTID0gKHsgaW5pdGlhbFNjYWxlLCBhbmltYXRpb25EdXJhdGlvbiB9KSA9PiAoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgb3BhY2l0eTogMCxcbiAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBhbmltYXRpb25FYXNpbmcuc3ByaW5nLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IGAke2FuaW1hdGlvbkR1cmF0aW9ufW1zYCxcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnb3BhY2l0eSwgdHJhbnNmb3JtJyxcbiAgdHJhbnNmb3JtOiBgc2NhbGUoJHtpbml0aWFsU2NhbGV9KSB0cmFuc2xhdGVZKC0xcHgpYCxcbiAgJyZbZGF0YS1zdGF0ZT1cImVudGVyaW5nXCJdLCAmW2RhdGEtc3RhdGU9XCJlbnRlcmVkXCJdJzoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgIHRyYW5zZm9ybTogYHNjYWxlKDEpYFxuICB9LFxuICAnJltkYXRhLXN0YXRlPVwiZXhpdGluZ1wiXSc6IHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3NpdGlvbmVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHBvc2l0aW9uIHRoZSBlbGVtZW50IHRoYXQgaXMgYmVpbmcgcG9zaXRpb25lZCBpcyBvbi5cbiAgICAgKiBTbWFydCBwb3NpdGlvbmluZyBtaWdodCBvdmVycmlkZSB0aGlzLlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoUG9zaXRpb24pKS5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBzaG93IHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gICAgICovXG4gICAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAgICAgKi9cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVmIG9mIHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gICAgICovXG4gICAgaW5uZXJSZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSBkaXN0YW5jZSBmcm9tIHRoZSBib2R5IHRvIHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gICAgICovXG4gICAgYm9keU9mZnNldDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gZGlzdGFuY2UgZnJvbSB0aGUgdGFyZ2V0IHRvIHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gICAgICovXG4gICAgdGFyZ2V0T2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHNob3VsZCByZXR1cm4gYSBub2RlIGZvciB0aGUgdGFyZ2V0LlxuICAgICAqICh7IGdldFJlZjogKCkgLT4gUmVmLCBpc1Nob3duOiBCb29sIH0pIC0+IFJlYWN0IE5vZGVcbiAgICAgKi9cbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgei1pbmRleCBvZiB0aGUgZWxlbWVudCBiZWluZyBwb3NpdGlvbmVkLlxuICAgICAqL1xuICAgIHpJbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbCBzY2FsZSBvZiB0aGUgZWxlbWVudCBiZWluZyBwb3NpdGlvbmVkLlxuICAgICAqL1xuICAgIGluaXRpYWxTY2FsZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgKi9cbiAgICBhbmltYXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBleGl0IHRyYW5zaXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgb25DbG9zZUNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBlbnRlciB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIG9uT3BlbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHBvc2l0aW9uOiBQb3NpdGlvbi5CT1RUT00sXG4gICAgekluZGV4OiA0MCxcbiAgICBib2R5T2Zmc2V0OiA2LFxuICAgIHRhcmdldE9mZnNldDogNixcbiAgICBpbml0aWFsU2NhbGU6IDAuOSxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogMzAwLFxuICAgIGlubmVyUmVmOiAoKSA9PiB7fSxcbiAgICBvbk9wZW5Db21wbGV0ZTogKCkgPT4ge30sXG4gICAgb25DbG9zZUNvbXBsZXRlOiAoKSA9PiB7fVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dClcbiAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlKClcbiAgfVxuXG4gIGdldFRhcmdldFJlZiA9IHJlZiA9PiB7XG4gICAgdGhpcy50YXJnZXRSZWYgPSByZWZcbiAgfVxuXG4gIGdldFJlZiA9IHJlZiA9PiB7XG4gICAgdGhpcy5wb3NpdGlvbmVyUmVmID0gcmVmXG4gICAgdGhpcy5wcm9wcy5pbm5lclJlZihyZWYpXG4gIH1cblxuICBoYW5kbGVFbnRlciA9ICgpID0+IHtcbiAgICB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICBnZXRUYXJnZXRSZWN0ID0gKCkgPT4gdGhpcy50YXJnZXRSZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICB1cGRhdGUgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmlzU2hvd24gfHwgIXRoaXMudGFyZ2V0UmVmIHx8ICF0aGlzLnBvc2l0aW9uZXJSZWYpIHJldHVyblxuXG4gICAgY29uc3QgdGFyZ2V0UmVjdCA9IHRoaXMuZ2V0VGFyZ2V0UmVjdCgpXG4gICAgY29uc3Qgdmlld3BvcnRIZWlnaHQgPVxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCArIHdpbmRvdy5zY3JvbGxZXG4gICAgY29uc3Qgdmlld3BvcnRXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCArIHdpbmRvdy5zY3JvbGxYXG5cbiAgICBjb25zdCB7IHJlY3QsIHRyYW5zZm9ybU9yaWdpbiB9ID0gZ2V0UG9zaXRpb24oe1xuICAgICAgcG9zaXRpb246IHRoaXMucHJvcHMucG9zaXRpb24sXG4gICAgICB0YXJnZXRSZWN0LFxuICAgICAgdGFyZ2V0T2Zmc2V0OiB0aGlzLnByb3BzLnRhcmdldE9mZnNldCxcbiAgICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnBvc2l0aW9uZXJSZWYub2Zmc2V0SGVpZ2h0LFxuICAgICAgICB3aWR0aDogdGhpcy5wb3NpdGlvbmVyUmVmLm9mZnNldFdpZHRoXG4gICAgICB9LFxuICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgd2lkdGg6IHZpZXdwb3J0V2lkdGgsXG4gICAgICAgIGhlaWdodDogdmlld3BvcnRIZWlnaHRcbiAgICAgIH0sXG4gICAgICB2aWV3cG9ydE9mZnNldDogdGhpcy5wcm9wcy5ib2R5T2Zmc2V0XG4gICAgfSlcblxuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICB7XG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luXG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgaGFuZGxlRXhpdGVkID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uaW5pdGlhbFN0YXRlKClcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlQ29tcGxldGUoKVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB6SW5kZXgsXG4gICAgICB0YXJnZXQsXG4gICAgICBpc1Nob3duLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpbml0aWFsU2NhbGUsXG4gICAgICB0YXJnZXRPZmZzZXQsXG4gICAgICBhbmltYXRpb25EdXJhdGlvblxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB7IGxlZnQsIHRvcCwgdHJhbnNmb3JtT3JpZ2luIH0gPSB0aGlzLnN0YXRlXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICB7dGFyZ2V0KHsgZ2V0UmVmOiB0aGlzLmdldFRhcmdldFJlZiwgaXNTaG93biB9KX1cbiAgICAgICAgPFBvcnRhbD5cbiAgICAgICAgICA8VHJhbnNpdGlvblxuICAgICAgICAgICAgaW49e2lzU2hvd259XG4gICAgICAgICAgICB0aW1lb3V0PXthbmltYXRpb25EdXJhdGlvbn1cbiAgICAgICAgICAgIG9uRW50ZXI9e3RoaXMuaGFuZGxlRW50ZXJ9XG4gICAgICAgICAgICBvbkVudGVyZWQ9e3RoaXMucHJvcHMub25PcGVuQ29tcGxldGV9XG4gICAgICAgICAgICBvbkV4aXRlZD17dGhpcy5oYW5kbGVFeGl0ZWR9XG4gICAgICAgICAgICB1bm1vdW50T25FeGl0XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3N0YXRlID0+XG4gICAgICAgICAgICAgIGNoaWxkcmVuKHtcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAgICB6SW5kZXgsXG4gICAgICAgICAgICAgICAgY3NzOiBnZXRDU1MoeyB0YXJnZXRPZmZzZXQsIGluaXRpYWxTY2FsZSwgYW5pbWF0aW9uRHVyYXRpb24gfSksXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbixcbiAgICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgICB6SW5kZXhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldFJlZjogdGhpcy5nZXRSZWYsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb25cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L1RyYW5zaXRpb24+XG4gICAgICAgIDwvUG9ydGFsPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApXG4gIH1cbn1cbiJdfQ==