var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { spacing, position, layout } from 'ui-box';
import SwitchAppearances from './styles/SwitchAppearances';

var animationEasing = {
  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'
};

var handleStyle = {
  backgroundColor: '#fff',
  borderRadius: 9999
};

var iconContainerStyle = {
  transition: 'all 500ms ' + animationEasing.spring,
  opacity: 0,
  transform: 'scale(0.0)',
  display: 'flex',
  position: 'absolute',
  alignItems: 'center',
  justifyContent: 'center',
  paddingLeft: 4,
  '&[data-checked="true"]': {
    opacity: 1,
    transform: 'scale(1)'
  }
};

var handleContainerStyle = {
  transition: 'transform 200ms ease-in-out',
  transform: 'translateX(0%)',
  '&[data-checked="true"]': {
    transform: 'translateX(50%)'
  }
};

var CheckIcon = function CheckIcon(_ref) {
  var size = _ref.size,
      _ref$fill = _ref.fill,
      fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,
      props = _objectWithoutProperties(_ref, ['size', 'fill']);

  return React.createElement(
    'svg',
    _extends({ width: 10, height: size, viewBox: '0 0 10 7' }, props),
    React.createElement('path', {
      fill: fill,
      fillRule: 'evenodd',
      d: 'M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z'
    })
  );
};

CheckIcon.propTypes = {
  fill: PropTypes.string,
  size: PropTypes.number
};

var isControlled = function isControlled(component) {
  return {}.hasOwnProperty.call(component.props, 'checked');
};

var Switch = function (_PureComponent) {
  _inherits(Switch, _PureComponent);

  function Switch(props, context) {
    _classCallCheck(this, Switch);

    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props, context));

    _this.handleChange = function (value) {
      if (isControlled(_this)) {
        _this.props.onChange(value);
      } else {
        _this.setState({
          checked: !_this.state.checked
        });
        _this.props.onChange(value);
      }
    };

    _this.state = {
      checked: props.checked || props.defaultChecked || false
    };
    return _this;
  }

  _createClass(Switch, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          name = _props.name,
          height = _props.height,
          checkedProps = _props.checked,
          onChange = _props.onChange,
          disabled = _props.disabled,
          appearance = _props.appearance,
          hasCheckIcon = _props.hasCheckIcon,
          defaultChecked = _props.defaultChecked,
          props = _objectWithoutProperties(_props, ['id', 'name', 'height', 'checked', 'onChange', 'disabled', 'appearance', 'hasCheckIcon', 'defaultChecked']);

      var checked = isControlled(this) ? checkedProps : this.state.checked;
      var appearanceStyle = SwitchAppearances[appearance];

      return React.createElement(
        Box,
        _extends({ is: 'label', display: 'block', width: height * 2 }, props),
        React.createElement(Box, {
          is: 'input',
          id: id,
          name: name,
          type: 'checkbox',
          checked: checked,
          disabled: disabled,
          defaultChecked: defaultChecked,
          onChange: this.handleChange,
          css: appearanceStyle
        }),
        React.createElement(
          Box,
          { onClick: this.handleClick, height: height, width: height * 2 },
          React.createElement(
            Box,
            {
              height: height,
              width: height,
              'data-checked': checked,
              css: iconContainerStyle
            },
            hasCheckIcon && React.createElement(CheckIcon, { size: height / 2 - 3 })
          ),
          React.createElement(
            Box,
            {
              width: height * 2,
              display: 'flex',
              'data-checked': checked,
              css: handleContainerStyle
            },
            React.createElement(
              Box,
              { flex: 1, padding: 2 },
              React.createElement(Box, { width: height - 4, height: height - 4, css: handleStyle })
            )
          )
        )
      );
    }
  }]);

  return Switch;
}(PureComponent);

Switch.propTypes = _extends({}, position.propTypes, layout.propTypes, spacing.propTypes, {
  id: PropTypes.string,
  name: PropTypes.string,
  label: PropTypes.node,
  value: PropTypes.string,
  height: PropTypes.number,
  checked: PropTypes.bool,
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  isInvalid: PropTypes.bool,
  appearance: PropTypes.oneOf(Object.keys(SwitchAppearances)),
  hasCheckIcon: PropTypes.bool,
  defaultChecked: PropTypes.bool
});
Switch.defaultProps = {
  height: 16,
  onChange: function onChange() {},
  appearance: 'default',
  hasCheckIcon: true
};
export default Switch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,