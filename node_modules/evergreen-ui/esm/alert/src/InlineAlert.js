var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { spacing, dimensions, position, layout } from 'ui-box';
import { colors } from '../../colors';
import { Pane } from '../../layers';
import { Text } from '../../typography';
import { CheckCircleIcon, DangerIcon, QuestionIcon, WarningIcon } from '../../icons';

var getColorForType = function getColorForType(type) {
  switch (type) {
    case 'success':
      return colors.green['500'];
    case 'question':
    default:
      return colors.blue['500'];
    case 'danger':
      return colors.red['500'];
    case 'warning':
      return colors.yellow['500'];
  }
};

var getIconForType = function getIconForType(type) {
  var iconProps = {
    size: 22,
    iconSize: 14,
    color: getColorForType(type)
  };

  switch (type) {
    case 'success':
      return React.createElement(CheckCircleIcon, iconProps);
    case 'question':
    default:
      return React.createElement(QuestionIcon, iconProps);
    case 'danger':
      return React.createElement(DangerIcon, iconProps);
    case 'warning':
      return React.createElement(WarningIcon, iconProps);
  }
};

var InlineAlert = function (_PureComponent) {
  _inherits(InlineAlert, _PureComponent);

  function InlineAlert() {
    _classCallCheck(this, InlineAlert);

    return _possibleConstructorReturn(this, (InlineAlert.__proto__ || Object.getPrototypeOf(InlineAlert)).apply(this, arguments));
  }

  _createClass(InlineAlert, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          type = _props.type,
          hasIcon = _props.hasIcon,
          size = _props.size,
          props = _objectWithoutProperties(_props, ['children', 'type', 'hasIcon', 'size']);

      return React.createElement(
        Pane,
        _extends({ alignItems: 'center', display: 'flex' }, props),
        hasIcon && type !== 'default' && React.createElement(
          Pane,
          { display: 'inline', marginRight: 8 },
          getIconForType(type)
        ),
        React.createElement(
          Text,
          { size: size, fontWeight: 500 },
          children
        )
      );
    }
  }]);

  return InlineAlert;
}(PureComponent);

InlineAlert.propTypes = _extends({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {

  /**
   * The content of the alert.
   */
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /**
   * The type of the alert. This should always be set explicitly.
   */
  type: PropTypes.oneOf(['default', 'success', 'warning', 'danger', 'question']),

  /**
   * When true, show a icon on the left matching the type.
   * There is no point not showing this.
   */
  hasIcon: PropTypes.bool,

  /**
   * The size of the Text.
   */
  size: PropTypes.number
});
InlineAlert.defaultProps = {
  type: 'default',
  hasIcon: true,
  size: 400
};
export default InlineAlert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbGVydC9zcmMvSW5saW5lQWxlcnQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwic3BhY2luZyIsImRpbWVuc2lvbnMiLCJwb3NpdGlvbiIsImxheW91dCIsImNvbG9ycyIsIlBhbmUiLCJUZXh0IiwiQ2hlY2tDaXJjbGVJY29uIiwiRGFuZ2VySWNvbiIsIlF1ZXN0aW9uSWNvbiIsIldhcm5pbmdJY29uIiwiZ2V0Q29sb3JGb3JUeXBlIiwidHlwZSIsImdyZWVuIiwiYmx1ZSIsInJlZCIsInllbGxvdyIsImdldEljb25Gb3JUeXBlIiwiaWNvblByb3BzIiwic2l6ZSIsImljb25TaXplIiwiY29sb3IiLCJJbmxpbmVBbGVydCIsInByb3BzIiwiY2hpbGRyZW4iLCJoYXNJY29uIiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibm9kZSIsIm9uZU9mIiwiYm9vbCIsIm51bWJlciIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsT0FBVCxFQUFrQkMsVUFBbEIsRUFBOEJDLFFBQTlCLEVBQXdDQyxNQUF4QyxRQUFzRCxRQUF0RDtBQUNBLFNBQVNDLE1BQVQsUUFBdUIsY0FBdkI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGNBQXJCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixrQkFBckI7QUFDQSxTQUNFQyxlQURGLEVBRUVDLFVBRkYsRUFHRUMsWUFIRixFQUlFQyxXQUpGLFFBS08sYUFMUDs7QUFPQSxJQUFNQyxrQkFBa0IsU0FBbEJBLGVBQWtCLE9BQVE7QUFDOUIsVUFBUUMsSUFBUjtBQUNFLFNBQUssU0FBTDtBQUNFLGFBQU9SLE9BQU9TLEtBQVAsQ0FBYSxLQUFiLENBQVA7QUFDRixTQUFLLFVBQUw7QUFDQTtBQUNFLGFBQU9ULE9BQU9VLElBQVAsQ0FBWSxLQUFaLENBQVA7QUFDRixTQUFLLFFBQUw7QUFDRSxhQUFPVixPQUFPVyxHQUFQLENBQVcsS0FBWCxDQUFQO0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBT1gsT0FBT1ksTUFBUCxDQUFjLEtBQWQsQ0FBUDtBQVRKO0FBV0QsQ0FaRDs7QUFjQSxJQUFNQyxpQkFBaUIsU0FBakJBLGNBQWlCLE9BQVE7QUFDN0IsTUFBTUMsWUFBWTtBQUNoQkMsVUFBTSxFQURVO0FBRWhCQyxjQUFVLEVBRk07QUFHaEJDLFdBQU9WLGdCQUFnQkMsSUFBaEI7QUFIUyxHQUFsQjs7QUFNQSxVQUFRQSxJQUFSO0FBQ0UsU0FBSyxTQUFMO0FBQ0UsYUFBTyxvQkFBQyxlQUFELEVBQXFCTSxTQUFyQixDQUFQO0FBQ0YsU0FBSyxVQUFMO0FBQ0E7QUFDRSxhQUFPLG9CQUFDLFlBQUQsRUFBa0JBLFNBQWxCLENBQVA7QUFDRixTQUFLLFFBQUw7QUFDRSxhQUFPLG9CQUFDLFVBQUQsRUFBZ0JBLFNBQWhCLENBQVA7QUFDRixTQUFLLFNBQUw7QUFDRSxhQUFPLG9CQUFDLFdBQUQsRUFBaUJBLFNBQWpCLENBQVA7QUFUSjtBQVdELENBbEJEOztJQW9CcUJJLFc7Ozs7Ozs7Ozs7OzZCQTRDVjtBQUFBLG1CQUM2QyxLQUFLQyxLQURsRDtBQUFBLFVBQ0NDLFFBREQsVUFDQ0EsUUFERDtBQUFBLFVBQ1daLElBRFgsVUFDV0EsSUFEWDtBQUFBLFVBQ2lCYSxPQURqQixVQUNpQkEsT0FEakI7QUFBQSxVQUMwQk4sSUFEMUIsVUFDMEJBLElBRDFCO0FBQUEsVUFDbUNJLEtBRG5DOztBQUdQLGFBQ0U7QUFBQyxZQUFEO0FBQUEsbUJBQU0sWUFBVyxRQUFqQixFQUEwQixTQUFRLE1BQWxDLElBQTZDQSxLQUE3QztBQUNHRSxtQkFDQ2IsU0FBUyxTQURWLElBRUc7QUFBQyxjQUFEO0FBQUEsWUFBTSxTQUFRLFFBQWQsRUFBdUIsYUFBYSxDQUFwQztBQUNHSyx5QkFBZUwsSUFBZjtBQURILFNBSE47QUFPRTtBQUFDLGNBQUQ7QUFBQSxZQUFNLE1BQU1PLElBQVosRUFBa0IsWUFBWSxHQUE5QjtBQUNHSztBQURIO0FBUEYsT0FERjtBQWFEOzs7O0VBNURzQzFCLGE7O0FBQXBCd0IsVyxDQUNaSSxTLGdCQUlGMUIsUUFBUTBCLFMsRUFDUnhCLFNBQVN3QixTLEVBQ1R2QixPQUFPdUIsUyxFQUNQekIsV0FBV3lCLFM7O0FBRWQ7OztBQUdBRixZQUFVekIsVUFBVTRCLFNBQVYsQ0FBb0IsQ0FBQzVCLFVBQVU2QixNQUFYLEVBQW1CN0IsVUFBVThCLElBQTdCLENBQXBCLEM7O0FBRVY7OztBQUdBakIsUUFBTWIsVUFBVStCLEtBQVYsQ0FBZ0IsQ0FDcEIsU0FEb0IsRUFFcEIsU0FGb0IsRUFHcEIsU0FIb0IsRUFJcEIsUUFKb0IsRUFLcEIsVUFMb0IsQ0FBaEIsQzs7QUFRTjs7OztBQUlBTCxXQUFTMUIsVUFBVWdDLEk7O0FBRW5COzs7QUFHQVosUUFBTXBCLFVBQVVpQzs7QUFuQ0NWLFcsQ0FzQ1pXLFksR0FBZTtBQUNwQnJCLFFBQU0sU0FEYztBQUVwQmEsV0FBUyxJQUZXO0FBR3BCTixRQUFNO0FBSGMsQztlQXRDSEcsVyIsImZpbGUiOiJJbmxpbmVBbGVydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBzcGFjaW5nLCBkaW1lbnNpb25zLCBwb3NpdGlvbiwgbGF5b3V0IH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi4vLi4vY29sb3JzJ1xuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uLy4uL2xheWVycydcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90eXBvZ3JhcGh5J1xuaW1wb3J0IHtcbiAgQ2hlY2tDaXJjbGVJY29uLFxuICBEYW5nZXJJY29uLFxuICBRdWVzdGlvbkljb24sXG4gIFdhcm5pbmdJY29uXG59IGZyb20gJy4uLy4uL2ljb25zJ1xuXG5jb25zdCBnZXRDb2xvckZvclR5cGUgPSB0eXBlID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICByZXR1cm4gY29sb3JzLmdyZWVuWyc1MDAnXVxuICAgIGNhc2UgJ3F1ZXN0aW9uJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvbG9ycy5ibHVlWyc1MDAnXVxuICAgIGNhc2UgJ2Rhbmdlcic6XG4gICAgICByZXR1cm4gY29sb3JzLnJlZFsnNTAwJ11cbiAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgIHJldHVybiBjb2xvcnMueWVsbG93Wyc1MDAnXVxuICB9XG59XG5cbmNvbnN0IGdldEljb25Gb3JUeXBlID0gdHlwZSA9PiB7XG4gIGNvbnN0IGljb25Qcm9wcyA9IHtcbiAgICBzaXplOiAyMixcbiAgICBpY29uU2l6ZTogMTQsXG4gICAgY29sb3I6IGdldENvbG9yRm9yVHlwZSh0eXBlKVxuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICByZXR1cm4gPENoZWNrQ2lyY2xlSWNvbiB7Li4uaWNvblByb3BzfSAvPlxuICAgIGNhc2UgJ3F1ZXN0aW9uJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDxRdWVzdGlvbkljb24gey4uLmljb25Qcm9wc30gLz5cbiAgICBjYXNlICdkYW5nZXInOlxuICAgICAgcmV0dXJuIDxEYW5nZXJJY29uIHsuLi5pY29uUHJvcHN9IC8+XG4gICAgY2FzZSAnd2FybmluZyc6XG4gICAgICByZXR1cm4gPFdhcm5pbmdJY29uIHsuLi5pY29uUHJvcHN9IC8+XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5saW5lQWxlcnQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyBzb21lIEJveCBBUElzLlxuICAgICAqL1xuICAgIC4uLnNwYWNpbmcucHJvcFR5cGVzLFxuICAgIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcbiAgICAuLi5sYXlvdXQucHJvcFR5cGVzLFxuICAgIC4uLmRpbWVuc2lvbnMucHJvcFR5cGVzLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGFsZXJ0LlxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubm9kZV0pLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGFsZXJ0LiBUaGlzIHNob3VsZCBhbHdheXMgYmUgc2V0IGV4cGxpY2l0bHkuXG4gICAgICovXG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdkZWZhdWx0JyxcbiAgICAgICdzdWNjZXNzJyxcbiAgICAgICd3YXJuaW5nJyxcbiAgICAgICdkYW5nZXInLFxuICAgICAgJ3F1ZXN0aW9uJ1xuICAgIF0pLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBzaG93IGEgaWNvbiBvbiB0aGUgbGVmdCBtYXRjaGluZyB0aGUgdHlwZS5cbiAgICAgKiBUaGVyZSBpcyBubyBwb2ludCBub3Qgc2hvd2luZyB0aGlzLlxuICAgICAqL1xuICAgIGhhc0ljb246IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIFRleHQuXG4gICAgICovXG4gICAgc2l6ZTogUHJvcFR5cGVzLm51bWJlclxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB0eXBlOiAnZGVmYXVsdCcsXG4gICAgaGFzSWNvbjogdHJ1ZSxcbiAgICBzaXplOiA0MDBcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCB0eXBlLCBoYXNJY29uLCBzaXplLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBkaXNwbGF5PVwiZmxleFwiIHsuLi5wcm9wc30+XG4gICAgICAgIHtoYXNJY29uICYmXG4gICAgICAgICAgdHlwZSAhPT0gJ2RlZmF1bHQnICYmIChcbiAgICAgICAgICAgIDxQYW5lIGRpc3BsYXk9XCJpbmxpbmVcIiBtYXJnaW5SaWdodD17OH0+XG4gICAgICAgICAgICAgIHtnZXRJY29uRm9yVHlwZSh0eXBlKX1cbiAgICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgICApfVxuICAgICAgICA8VGV4dCBzaXplPXtzaXplfSBmb250V2VpZ2h0PXs1MDB9PlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfVxufVxuIl19