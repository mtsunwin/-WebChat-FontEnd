var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import debounce from 'lodash.debounce';
import { Position, Positioner } from '../../positioner';
import TooltipStateless from './TooltipStateless';

var idCounter = 0;

var Tooltip = function (_PureComponent) {
  _inherits(Tooltip, _PureComponent);

  function Tooltip(props, context) {
    _classCallCheck(this, Tooltip);

    var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props, context));

    _this.show = function () {
      if (_this.state.isShown) return;
      _this.setState({
        isShown: true
      });
    };

    _this.hide = function () {
      if (!_this.state.isShown) return;
      _this.setState({
        isShown: false
      });
    };

    _this.renderTarget = function (_ref) {
      var getRef = _ref.getRef;
      var children = _this.props.children;


      return React.cloneElement(children, {
        onMouseEnter: _this.show,
        onMouseLeave: _this.hide,
        'aria-describedby': _this.state.id,
        innerRef: function innerRef(ref) {
          getRef(ref);
        }
      });
    };

    _this.handleMouseEnterTarget = function () {
      _this.setState({
        isShownByTarget: true
      });
    };

    _this.handleMouseLeaveTarget = function () {
      _this.setState({
        isShownByTarget: false
      });
    };

    _this.state = {
      id: 'evergreen-tooltip-' + ++idCounter,
      isShown: props.isShown,
      isShownByTarget: false
    };

    _this.handleMouseLeaveTarget = debounce(_this.handleMouseLeaveTarget, _this.props.hideDelay);

    _this.hide = debounce(_this.hide, _this.props.hideDelay);
    return _this;
  }

  _createClass(Tooltip, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          isShown = _props.isShown,
          zIndex = _props.zIndex,
          content = _props.content,
          position = _props.position,
          statelessProps = _props.statelessProps;
      var _state = this.state,
          stateIsShown = _state.isShown,
          isShownByTarget = _state.isShownByTarget;


      var shown = isShown || stateIsShown || isShownByTarget;

      return React.createElement(
        Positioner,
        {
          target: function target(_ref2) {
            var getRef = _ref2.getRef;

            return _this2.renderTarget({ getRef: getRef });
          },
          zIndex: zIndex,
          isShown: shown,
          position: position,
          animationDuration: 160
        },
        function (_ref3) {
          var css = _ref3.css,
              style = _ref3.style,
              state = _ref3.state,
              getRef = _ref3.getRef;
          return React.createElement(
            TooltipStateless,
            _extends({
              id: _this2.state.id,
              innerRef: function innerRef(ref) {
                return getRef(ref);
              },
              'data-state': state,
              css: css,
              style: style,
              onMouseEnter: _this2.handleMouseEnterTarget,
              onMouseLeave: _this2.handleMouseLeaveTarget
            }, statelessProps),
            content
          );
        }
      );
    }
  }]);

  return Tooltip;
}(PureComponent);

Tooltip.propTypes = {
  /**
   * The position the Popover is on.
   */
  position: PropTypes.oneOf(Object.keys(Position)),

  /**
   * The content of the Popover.
   */
  content: PropTypes.node.isRequired,

  /**
   * Time in ms before hiding the Tooltip.
   */
  hideDelay: PropTypes.number.isRequired,

  /**
   * When True, manually show the Tooltip.
   */
  isShown: PropTypes.bool,

  /**
   * The target button of the Tooltip.
   */
  children: PropTypes.node.isRequried,

  /**
   * Properties passed through to the Tooltip.
   */
  statelessProps: PropTypes.object,

  /**
   * The z-index of the Tooltip.
   */
  zIndex: PropTypes.number.isRequired
};
Tooltip.defaultProps = {
  position: Position.BOTTOM,
  zIndex: 40,
  hideDelay: 120
};
export default Tooltip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,