var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Strong } from '../../typography';
import { FillAppearances } from '../../shared-styles';

var Badge = function (_PureComponent) {
  _inherits(Badge, _PureComponent);

  function Badge() {
    _classCallCheck(this, Badge);

    return _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).apply(this, arguments));
  }

  _createClass(Badge, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          appearance = _props.appearance,
          isSolid = _props.isSolid,
          props = _objectWithoutProperties(_props, ['appearance', 'isSolid']);

      var opacity = isSolid ? 'solid' : 'default';
      var appearanceStyle = FillAppearances[opacity][appearance];
      return React.createElement(Strong, _extends({ size: 300 }, Badge.styles, appearanceStyle, props));
    }
  }]);

  return Badge;
}(PureComponent);

Badge.propTypes = _extends({}, Strong.propTypes, {
  appearance: PropTypes.oneOf(Object.keys(FillAppearances.default)).isRequired
});
Badge.defaultProps = {
  appearance: 'neutral',
  isSolid: false
};
Badge.styles = {
  display: 'inline-block',
  boxSizing: 'border-box',
  height: 16,
  paddingTop: 0,
  paddingRight: 6,
  paddingBottom: 0,
  paddingLeft: 6,
  borderRadius: 2,
  textAlign: 'center',
  textDecoration: 'none',
  textTransform: 'uppercase'
};
export default Badge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYWRnZXMvc3JjL0JhZGdlLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlN0cm9uZyIsIkZpbGxBcHBlYXJhbmNlcyIsIkJhZGdlIiwicHJvcHMiLCJhcHBlYXJhbmNlIiwiaXNTb2xpZCIsIm9wYWNpdHkiLCJhcHBlYXJhbmNlU3R5bGUiLCJzdHlsZXMiLCJwcm9wVHlwZXMiLCJvbmVPZiIsIk9iamVjdCIsImtleXMiLCJkZWZhdWx0IiwiaXNSZXF1aXJlZCIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXkiLCJib3hTaXppbmciLCJoZWlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwiYm9yZGVyUmFkaXVzIiwidGV4dEFsaWduIiwidGV4dERlY29yYXRpb24iLCJ0ZXh0VHJhbnNmb3JtIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxNQUFULFFBQXVCLGtCQUF2QjtBQUNBLFNBQVNDLGVBQVQsUUFBZ0MscUJBQWhDOztJQUVxQkMsSzs7Ozs7Ozs7Ozs7NkJBeUJWO0FBQUEsbUJBQ21DLEtBQUtDLEtBRHhDO0FBQUEsVUFDQ0MsVUFERCxVQUNDQSxVQUREO0FBQUEsVUFDYUMsT0FEYixVQUNhQSxPQURiO0FBQUEsVUFDeUJGLEtBRHpCOztBQUVQLFVBQU1HLFVBQVVELFVBQVUsT0FBVixHQUFvQixTQUFwQztBQUNBLFVBQU1FLGtCQUFrQk4sZ0JBQWdCSyxPQUFoQixFQUF5QkYsVUFBekIsQ0FBeEI7QUFDQSxhQUNFLG9CQUFDLE1BQUQsYUFBUSxNQUFNLEdBQWQsSUFBdUJGLE1BQU1NLE1BQTdCLEVBQXlDRCxlQUF6QyxFQUE4REosS0FBOUQsRUFERjtBQUdEOzs7O0VBaENnQ0wsYTs7QUFBZEksSyxDQUNaTyxTLGdCQUNGVCxPQUFPUyxTO0FBQ1ZMLGNBQVlMLFVBQVVXLEtBQVYsQ0FBZ0JDLE9BQU9DLElBQVAsQ0FBWVgsZ0JBQWdCWSxPQUE1QixDQUFoQixFQUFzREM7O0FBSGpEWixLLENBTVphLFksR0FBZTtBQUNwQlgsY0FBWSxTQURRO0FBRXBCQyxXQUFTO0FBRlcsQztBQU5ISCxLLENBV1pNLE0sR0FBUztBQUNkUSxXQUFTLGNBREs7QUFFZEMsYUFBVyxZQUZHO0FBR2RDLFVBQVEsRUFITTtBQUlkQyxjQUFZLENBSkU7QUFLZEMsZ0JBQWMsQ0FMQTtBQU1kQyxpQkFBZSxDQU5EO0FBT2RDLGVBQWEsQ0FQQztBQVFkQyxnQkFBYyxDQVJBO0FBU2RDLGFBQVcsUUFURztBQVVkQyxrQkFBZ0IsTUFWRjtBQVdkQyxpQkFBZTtBQVhELEM7ZUFYR3hCLEsiLCJmaWxlIjoiQmFkZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgU3Ryb25nIH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IEZpbGxBcHBlYXJhbmNlcyB9IGZyb20gJy4uLy4uL3NoYXJlZC1zdHlsZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhZGdlIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLi4uU3Ryb25nLnByb3BUeXBlcyxcbiAgICBhcHBlYXJhbmNlOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoRmlsbEFwcGVhcmFuY2VzLmRlZmF1bHQpKS5pc1JlcXVpcmVkXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFwcGVhcmFuY2U6ICduZXV0cmFsJyxcbiAgICBpc1NvbGlkOiBmYWxzZVxuICB9XG5cbiAgc3RhdGljIHN0eWxlcyA9IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBoZWlnaHQ6IDE2LFxuICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgcGFkZGluZ1JpZ2h0OiA2LFxuICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgcGFkZGluZ0xlZnQ6IDYsXG4gICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYXBwZWFyYW5jZSwgaXNTb2xpZCwgLi4ucHJvcHMgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBvcGFjaXR5ID0gaXNTb2xpZCA/ICdzb2xpZCcgOiAnZGVmYXVsdCdcbiAgICBjb25zdCBhcHBlYXJhbmNlU3R5bGUgPSBGaWxsQXBwZWFyYW5jZXNbb3BhY2l0eV1bYXBwZWFyYW5jZV1cbiAgICByZXR1cm4gKFxuICAgICAgPFN0cm9uZyBzaXplPXszMDB9IHsuLi5CYWRnZS5zdHlsZXN9IHsuLi5hcHBlYXJhbmNlU3R5bGV9IHsuLi5wcm9wc30gLz5cbiAgICApXG4gIH1cbn1cbiJdfQ==