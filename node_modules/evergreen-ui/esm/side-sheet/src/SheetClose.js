var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { css } from 'ui-box';
import { CloseIcon } from '../../icons';

var animationEasing = {
  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)'
};

var ANIMATION_DURATION = 240;

var rotate360InAnimation = css.keyframes('rotate360InAnimation', {
  from: {
    transform: 'translateX(100%) rotate(0deg)'
  },
  to: {
    transform: 'translateX(-100%) rotate(-360deg)'
  }
});

var rotate360OutAnimation = css.keyframes('rotate360OutAnimation', {
  from: {
    transform: 'translateX(-100%) rotate(0deg)'
  },
  to: {
    transform: 'translateX(100%) rotate(360deg)'
  }
});

var sheetCloseStyle = {
  cursor: 'pointer',
  transform: 'translateX(-100%)',
  backgroundColor: 'rgba(255, 255, 255, 0.4)',
  transition: 'background-color 120ms',
  '&:hover': {
    backgroundColor: 'rgba(255, 255, 255, 0.6)'
  },
  '&:active': {
    backgroundColor: 'rgba(255, 255, 255, 0.4)'
  },
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: rotate360InAnimation + ' ' + ANIMATION_DURATION + 'ms ' + animationEasing.deceleration + ' both'
  },
  '&[data-state="exiting"]': {
    animation: rotate360OutAnimation + ' ' + ANIMATION_DURATION + 'ms ' + animationEasing.acceleration + ' both'
  }
};

var SheetClose = function (_PureComponent) {
  _inherits(SheetClose, _PureComponent);

  function SheetClose() {
    _classCallCheck(this, SheetClose);

    return _possibleConstructorReturn(this, (SheetClose.__proto__ || Object.getPrototypeOf(SheetClose)).apply(this, arguments));
  }

  _createClass(SheetClose, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          isClosing = _props.isClosing,
          props = _objectWithoutProperties(_props, ['isClosing']);

      return React.createElement(
        Box,
        _extends({ css: sheetCloseStyle }, SheetClose.styles, props),
        React.createElement(CloseIcon, { color: '#fff' })
      );
    }
  }]);

  return SheetClose;
}(PureComponent);

SheetClose.propTypes = _extends({}, Box.propTypes, {
  isClosing: PropTypes.bool
});
SheetClose.styles = {
  position: 'absolute',
  marginLeft: -12,
  marginTop: 12,
  padding: 4,
  borderRadius: 9999
};
export default SheetClose;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXNoZWV0L3NyYy9TaGVldENsb3NlLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIkJveCIsImNzcyIsIkNsb3NlSWNvbiIsImFuaW1hdGlvbkVhc2luZyIsImRlY2VsZXJhdGlvbiIsImFjY2VsZXJhdGlvbiIsIkFOSU1BVElPTl9EVVJBVElPTiIsInJvdGF0ZTM2MEluQW5pbWF0aW9uIiwia2V5ZnJhbWVzIiwiZnJvbSIsInRyYW5zZm9ybSIsInRvIiwicm90YXRlMzYwT3V0QW5pbWF0aW9uIiwic2hlZXRDbG9zZVN0eWxlIiwiY3Vyc29yIiwiYmFja2dyb3VuZENvbG9yIiwidHJhbnNpdGlvbiIsImFuaW1hdGlvbiIsIlNoZWV0Q2xvc2UiLCJwcm9wcyIsImlzQ2xvc2luZyIsInN0eWxlcyIsInByb3BUeXBlcyIsImJvb2wiLCJwb3NpdGlvbiIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLElBQWNDLEdBQWQsUUFBeUIsUUFBekI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGFBQTFCOztBQUVBLElBQU1DLGtCQUFrQjtBQUN0QkMsZ0RBRHNCO0FBRXRCQztBQUZzQixDQUF4Qjs7QUFLQSxJQUFNQyxxQkFBcUIsR0FBM0I7O0FBRUEsSUFBTUMsdUJBQXVCTixJQUFJTyxTQUFKLENBQWMsc0JBQWQsRUFBc0M7QUFDakVDLFFBQU07QUFDSkM7QUFESSxHQUQyRDtBQUlqRUMsTUFBSTtBQUNGRDtBQURFO0FBSjZELENBQXRDLENBQTdCOztBQVNBLElBQU1FLHdCQUF3QlgsSUFBSU8sU0FBSixDQUFjLHVCQUFkLEVBQXVDO0FBQ25FQyxRQUFNO0FBQ0pDO0FBREksR0FENkQ7QUFJbkVDLE1BQUk7QUFDRkQ7QUFERTtBQUorRCxDQUF2QyxDQUE5Qjs7QUFTQSxJQUFNRyxrQkFBa0I7QUFDdEJDLFVBQVEsU0FEYztBQUV0QkosZ0NBRnNCO0FBR3RCSyw2Q0FIc0I7QUFJdEJDLHNDQUpzQjtBQUt0QixhQUFXO0FBQ1REO0FBRFMsR0FMVztBQVF0QixjQUFZO0FBQ1ZBO0FBRFUsR0FSVTtBQVd0Qix1REFBcUQ7QUFDbkRFLGVBQWNWLG9CQUFkLFNBQXNDRCxrQkFBdEMsV0FDRUgsZ0JBQWdCQyxZQURsQjtBQURtRCxHQVgvQjtBQWdCdEIsNkJBQTJCO0FBQ3pCYSxlQUFjTCxxQkFBZCxTQUF1Q04sa0JBQXZDLFdBQ0VILGdCQUFnQkUsWUFEbEI7QUFEeUI7QUFoQkwsQ0FBeEI7O0lBdUJxQmEsVTs7Ozs7Ozs7Ozs7NkJBY1Y7QUFBQSxtQkFDeUIsS0FBS0MsS0FEOUI7QUFBQSxVQUNDQyxTQURELFVBQ0NBLFNBREQ7QUFBQSxVQUNlRCxLQURmOztBQUVQLGFBQ0U7QUFBQyxXQUFEO0FBQUEsbUJBQUssS0FBS04sZUFBVixJQUErQkssV0FBV0csTUFBMUMsRUFBc0RGLEtBQXREO0FBQ0UsNEJBQUMsU0FBRCxJQUFXLE9BQU0sTUFBakI7QUFERixPQURGO0FBS0Q7Ozs7RUFyQnFDckIsYTs7QUFBbkJvQixVLENBQ1pJLFMsZ0JBQ0Z0QixJQUFJc0IsUztBQUNQRixhQUFXckIsVUFBVXdCOztBQUhKTCxVLENBTVpHLE0sR0FBUztBQUNkRyxZQUFVLFVBREk7QUFFZEMsY0FBWSxDQUFDLEVBRkM7QUFHZEMsYUFBVyxFQUhHO0FBSWRDLFdBQVMsQ0FKSztBQUtkQyxnQkFBYztBQUxBLEM7ZUFOR1YsVSIsImZpbGUiOiJTaGVldENsb3NlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3gsIHsgY3NzIH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgQ2xvc2VJY29uIH0gZnJvbSAnLi4vLi4vaWNvbnMnXG5cbmNvbnN0IGFuaW1hdGlvbkVhc2luZyA9IHtcbiAgZGVjZWxlcmF0aW9uOiBgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpYCxcbiAgYWNjZWxlcmF0aW9uOiBgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAxLCAxKWBcbn1cblxuY29uc3QgQU5JTUFUSU9OX0RVUkFUSU9OID0gMjQwXG5cbmNvbnN0IHJvdGF0ZTM2MEluQW5pbWF0aW9uID0gY3NzLmtleWZyYW1lcygncm90YXRlMzYwSW5BbmltYXRpb24nLCB7XG4gIGZyb206IHtcbiAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgwZGVnKWBcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0xMDAlKSByb3RhdGUoLTM2MGRlZylgXG4gIH1cbn0pXG5cbmNvbnN0IHJvdGF0ZTM2ME91dEFuaW1hdGlvbiA9IGNzcy5rZXlmcmFtZXMoJ3JvdGF0ZTM2ME91dEFuaW1hdGlvbicsIHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgwZGVnKWBcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgzNjBkZWcpYFxuICB9XG59KVxuXG5jb25zdCBzaGVldENsb3NlU3R5bGUgPSB7XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0xMDAlKWAsXG4gIGJhY2tncm91bmRDb2xvcjogYHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KWAsXG4gIHRyYW5zaXRpb246IGBiYWNrZ3JvdW5kLWNvbG9yIDEyMG1zYCxcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpYFxuICB9LFxuICAnJjphY3RpdmUnOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpYFxuICB9LFxuICAnJltkYXRhLXN0YXRlPVwiZW50ZXJpbmdcIl0sICZbZGF0YS1zdGF0ZT1cImVudGVyZWRcIl0nOiB7XG4gICAgYW5pbWF0aW9uOiBgJHtyb3RhdGUzNjBJbkFuaW1hdGlvbn0gJHtBTklNQVRJT05fRFVSQVRJT059bXMgJHtcbiAgICAgIGFuaW1hdGlvbkVhc2luZy5kZWNlbGVyYXRpb25cbiAgICB9IGJvdGhgXG4gIH0sXG4gICcmW2RhdGEtc3RhdGU9XCJleGl0aW5nXCJdJzoge1xuICAgIGFuaW1hdGlvbjogYCR7cm90YXRlMzYwT3V0QW5pbWF0aW9ufSAke0FOSU1BVElPTl9EVVJBVElPTn1tcyAke1xuICAgICAgYW5pbWF0aW9uRWFzaW5nLmFjY2VsZXJhdGlvblxuICAgIH0gYm90aGBcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldENsb3NlIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLi4uQm94LnByb3BUeXBlcyxcbiAgICBpc0Nsb3Npbmc6IFByb3BUeXBlcy5ib29sXG4gIH1cblxuICBzdGF0aWMgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIG1hcmdpbkxlZnQ6IC0xMixcbiAgICBtYXJnaW5Ub3A6IDEyLFxuICAgIHBhZGRpbmc6IDQsXG4gICAgYm9yZGVyUmFkaXVzOiA5OTk5XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBpc0Nsb3NpbmcsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggY3NzPXtzaGVldENsb3NlU3R5bGV9IHsuLi5TaGVldENsb3NlLnN0eWxlc30gey4uLnByb3BzfT5cbiAgICAgICAgPENsb3NlSWNvbiBjb2xvcj1cIiNmZmZcIiAvPlxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9XG59XG4iXX0=