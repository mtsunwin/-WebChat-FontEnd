var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { dimensions, spacing, position, layout } from 'ui-box';
import { Autocomplete } from '../../autocomplete';
import { TextInput } from '../../text-input';
import { IconButton } from '../../buttons';

var Combobox = function (_PureComponent) {
  _inherits(Combobox, _PureComponent);

  function Combobox(props, context) {
    _classCallCheck(this, Combobox);

    var _this = _possibleConstructorReturn(this, (Combobox.__proto__ || Object.getPrototypeOf(Combobox)).call(this, props, context));

    _this.handleStateChange = function (changes) {
      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {
        if (!changes.isOpen) {
          _this.setState({ isOpenedByButton: false });
        }
      }
    };

    _this.state = {
      isOpenedByButton: false
    };
    return _this;
  }

  _createClass(Combobox, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          selectedItem = _props.selectedItem,
          defaultSelectedItem = _props.defaultSelectedItem,
          itemToString = _props.itemToString,
          width = _props.width,
          appearance = _props.appearance,
          height = _props.height,
          onChange = _props.onChange,
          placeholder = _props.placeholder,
          inputProps = _props.inputProps,
          buttonProps = _props.buttonProps,
          openOnFocus = _props.openOnFocus,
          autocompleteProps = _props.autocompleteProps,
          props = _objectWithoutProperties(_props, ['items', 'selectedItem', 'defaultSelectedItem', 'itemToString', 'width', 'appearance', 'height', 'onChange', 'placeholder', 'inputProps', 'buttonProps', 'openOnFocus', 'autocompleteProps']);

      return React.createElement(
        Autocomplete,
        _extends({
          items: items,
          selectedItem: selectedItem,
          defaultSelectedItem: defaultSelectedItem,
          itemToString: itemToString,
          onChange: onChange,
          onStateChange: this.handleStateChange,
          isFilterDisabled: this.state.isOpenedByButton
        }, autocompleteProps),
        function (_ref) {
          var getRef = _ref.getRef,
              isShown = _ref.isShown,
              openMenu = _ref.openMenu,
              inputValue = _ref.inputValue,
              getInputProps = _ref.getInputProps,
              getButtonProps = _ref.getButtonProps,
              clearSelection = _ref.clearSelection;
          return React.createElement(
            Box,
            _extends({
              innerRef: function innerRef(ref) {
                return getRef(ref);
              },
              display: 'inline-flex',
              width: width
            }, props),
            React.createElement(TextInput, _extends({
              width: 0,
              flex: 1,
              height: height,
              value: inputValue,
              borderTopRightRadius: 0,
              borderBottomRightRadius: 0
            }, getInputProps(_extends({}, inputProps, {
              placeholder: placeholder,
              onFocus: function onFocus() {
                if (openOnFocus) openMenu();
              },
              onChange: function onChange(e) {
                if (_this2.state.isOpenedByButton) {
                  _this2.setState({
                    isOpenedByButton: false
                  });
                }
                if (e.target.value.trim() === '') {
                  // Prevent the selected item from sticking around
                  clearSelection();
                }
              }
            })))),
            React.createElement(IconButton, _extends({
              iconAim: 'down',
              color: 'muted',
              icon: 'triangle',
              appearance: appearance,
              height: height,
              marginLeft: -1,
              paddingLeft: 0,
              paddingRight: 0,
              borderTopLeftRadius: 0,
              borderBottomLeftRadius: 0
            }, getButtonProps(_extends({}, buttonProps, {
              onClick: function onClick() {
                if (!isShown) {
                  _this2.setState({ isOpenedByButton: true });
                }
              }
            }))))
          );
        }
      );
    }
  }]);

  return Combobox;
}(PureComponent);

Combobox.propTypes = _extends({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {

  /**
   * The options to show in the menu.
   */
  items: PropTypes.array.isRequired,

  /**
   * The selected item when controlled.
   */
  selectedItem: PropTypes.any,

  /**
   * Function called when value changes.
   */
  onChange: PropTypes.func,

  /**
   * When true, open the autocomplete on focus.
   */
  openOnFocus: PropTypes.bool,

  /**
   * Default selected item when uncontrolled.
   */
  defaultSelectedItem: PropTypes.any,

  /**
   * The placeholder text when there is no value present.
   */
  placeholder: PropTypes.string,

  /**
   * In case the array of items is not an array of strings,
   * this function is used on each item to return the string that will be shown on the filter
   */
  itemToString: PropTypes.func,

  /**
   * Properties forwarded to the input. Use with caution.
   */
  inputProps: PropTypes.object,

  /**
   * Properties forwarded to the button. Use with caution.
   */
  buttonProps: PropTypes.object,

  /**
   * Properties forwarded to the autocomplete component. Use with caution.
   */
  autocompleteProps: PropTypes.object
});
Combobox.defaultProps = {
  width: 240,
  openOnFocus: false,
  appearance: 'default'
};
export default Combobox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,