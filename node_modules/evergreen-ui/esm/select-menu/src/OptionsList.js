var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import fuzzaldrin from 'fuzzaldrin-plus';
import VirtualList from 'react-tiny-virtual-list';
import { Pane } from '../../layers';
import { TableHead, SearchTableHeaderCell } from '../../table';
import OptionShapePropType from './OptionShapePropType';
import Option from './Option';

/**
 * Fuzzaldrin-plus is the default filter, but you can use your own
 * as long as they follow the following signature:
 * @param options <Array[String]> - ['label', 'label2', ...]
 * @param input <String>
 */
var fuzzyFilter = function fuzzyFilter(options, input) {
  return fuzzaldrin.filter(options, input);
};

/**
 * This is the default item renderer of options
 * you can pass custom renderers as long as they work the same as the Option
 */
var itemRenderer = function itemRenderer(props) {
  return React.createElement(Option, props);
};

var OptionsList = function (_PureComponent) {
  _inherits(OptionsList, _PureComponent);

  function OptionsList(props, context) {
    _classCallCheck(this, OptionsList);

    var _this = _possibleConstructorReturn(this, (OptionsList.__proto__ || Object.getPrototypeOf(OptionsList)).call(this, props, context));

    _this.isSelected = function (item) {
      var selected = _this.state.selected;


      return Boolean(selected.find(function (selectedItem) {
        return selectedItem === item.value;
      }));
    };

    _this.search = function (options) {
      var optionsFilter = _this.props.optionsFilter;
      var searchValue = _this.state.searchValue;


      return searchValue.trim() === '' ? options // Return if no search query
      : optionsFilter(options.map(function (item) {
        return item.labelInList || item.label;
      }), searchValue).map(function (name) {
        return options.find(function (item) {
          return item.labelInList === name || item.label === name;
        });
      });
    };

    _this.handleKeyUp = function (e) {
      if (e.keyCode === 38) {
        _this.handleArrowUp();
      }

      if (e.keyCode === 40) {
        _this.handleArrowDown();
      }

      if (e.keyCode === 13) {
        _this.handleEnter();
      }
    };

    _this.handleChange = function (searchValue) {
      _this.setState({
        searchValue: searchValue
      });
    };

    _this.handleSelect = function (item) {
      _this.props.onSelect(item);
    };

    _this.handleDeselect = function (item) {
      _this.props.onDeselect(item);
    };

    _this.assignSearchRef = function (ref) {
      _this.searchRef = ref;
    };

    _this.state = {
      searchValue: props.defaultSearchValue,
      selected: props.selected
    };
    return _this;
  }

  _createClass(OptionsList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var hasFilter = this.props.hasFilter;

      if (!hasFilter) return;
      /**
       * Hacky solution for broken autoFocus
       * https://github.com/segmentio/evergreen/issues/90
       */
      window.setTimeout(function () {
        _this2.searchRef.querySelector('input').focus();
      }, 1);
      window.addEventListener('keyup', this.handleKeyUp);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.selected !== this.state.selected) {
        this.setState({
          selected: nextProps.selected
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('keyup', this.handleKeyUp);
    }
  }, {
    key: 'getCurrentIndex',
    value: function getCurrentIndex() {
      var selected = this.props.selected;

      var options = this.getFilteredOptions();

      return options.findIndex(function (option) {
        return option.value === selected[selected.length - 1];
      });
    }
  }, {
    key: 'getFilteredOptions',
    value: function getFilteredOptions() {
      var options = this.props.options;


      return this.search(options);
    }
  }, {
    key: 'handleArrowUp',
    value: function handleArrowUp() {
      var onSelect = this.props.onSelect;

      var options = this.getFilteredOptions();

      var nextIndex = this.getCurrentIndex() - 1;

      if (nextIndex < 0) {
        nextIndex = options.length - 1;
      }

      onSelect(options[nextIndex]);
    }
  }, {
    key: 'handleArrowDown',
    value: function handleArrowDown() {
      var onSelect = this.props.onSelect;

      var options = this.getFilteredOptions();

      var nextIndex = this.getCurrentIndex() + 1;

      if (nextIndex === options.length) {
        nextIndex = 0;
      }

      onSelect(options[nextIndex]);
    }
  }, {
    key: 'handleEnter',
    value: function handleEnter() {
      var isSelected = this.getCurrentIndex() !== -1;

      if (isSelected) {
        this.props.close();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          close = _props.close,
          width = _props.width,
          height = _props.height,
          onSelect = _props.onSelect,
          onDeselect = _props.onDeselect,
          selected = _props.selected,
          hasFilter = _props.hasFilter,
          optionSize = _props.optionSize,
          _renderItem = _props.renderItem,
          placeholder = _props.placeholder,
          optionsFilter = _props.optionsFilter,
          defaultSearchValue = _props.defaultSearchValue,
          props = _objectWithoutProperties(_props, ['close', 'width', 'height', 'onSelect', 'onDeselect', 'selected', 'hasFilter', 'optionSize', 'renderItem', 'placeholder', 'optionsFilter', 'defaultSearchValue']);

      var options = this.getFilteredOptions();
      var listHeight = height - (hasFilter ? 32 : 0);

      return React.createElement(
        Pane,
        _extends({
          height: height,
          width: width,
          display: 'flex',
          flexDirection: 'column'
        }, props),
        hasFilter && React.createElement(
          TableHead,
          null,
          React.createElement(SearchTableHeaderCell, {
            onChange: this.handleChange,
            innerRef: this.assignSearchRef,
            borderRight: null,
            height: 32
          })
        ),
        React.createElement(
          Pane,
          { flex: 1 },
          React.createElement(VirtualList, {
            height: listHeight,
            width: '100%',
            itemSize: optionSize,
            itemCount: options.length,
            overscanCount: 3,
            scrollToAlignment: 'auto',
            renderItem: function renderItem(_ref) {
              var index = _ref.index,
                  style = _ref.style;

              var item = options[index];
              return _renderItem({
                key: item.value,
                label: item.label,
                style: style,
                height: optionSize,
                onSelect: function onSelect() {
                  return _this3.handleSelect(item);
                },
                onDeselect: function onDeselect() {
                  return _this3.handleDeselect(item);
                },
                isSelected: _this3.isSelected(item)
              });
            }
          })
        )
      );
    }
  }]);

  return OptionsList;
}(PureComponent);

OptionsList.propTypes = {
  options: PropTypes.arrayOf(OptionShapePropType),
  close: PropTypes.func,
  height: PropTypes.number,
  width: PropTypes.number,

  /**
   * This holds the values of the options
   */
  selected: PropTypes.arrayOf(PropTypes.string),
  onSelect: PropTypes.func,
  onDeselect: PropTypes.func,
  hasFilter: PropTypes.bool,
  optionSize: PropTypes.number,
  renderItem: PropTypes.func,
  placeholder: PropTypes.string,
  optionsFilter: PropTypes.func,
  defaultSearchValue: PropTypes.string
};
OptionsList.defaultProps = {
  options: [],
  /**
   * Including border bottom
   * For some reason passing height to TableRow doesn't work
   * TODO: fix hacky solution
   */
  optionSize: 33,
  onSelect: function onSelect() {},
  onDeselect: function onDeselect() {},
  selected: [],
  renderItem: itemRenderer,
  optionsFilter: fuzzyFilter,
  placeholder: 'Filter...',
  defaultSearchValue: ''
};
export default OptionsList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,