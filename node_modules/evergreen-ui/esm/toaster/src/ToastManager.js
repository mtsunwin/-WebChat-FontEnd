var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import { css } from 'glamor';
import PropTypes from 'prop-types';
import Toast from './Toast';

var wrapperClass = css({
  maxWidth: 560,
  margin: '0 auto',
  top: 0,
  left: 0,
  right: 0,
  position: 'fixed',
  zIndex: 60,
  pointerEvents: 'none'
});

var ToastManager = function (_React$PureComponent) {
  _inherits(ToastManager, _React$PureComponent);

  function ToastManager(props, context) {
    _classCallCheck(this, ToastManager);

    var _this = _possibleConstructorReturn(this, (ToastManager.__proto__ || Object.getPrototypeOf(ToastManager)).call(this, props, context));

    _this.getToasts = function () {
      return _this.state.toasts;
    };

    _this.closeAll = function () {
      _this.getToasts().forEach(function (toast) {
        return toast.close();
      });
    };

    _this.notify = function (title, settings) {
      var instance = _this.createToastInstance(title, settings);

      _this.setState(function (previousState) {
        return {
          toasts: [instance].concat(_toConsumableArray(previousState.toasts))
        };
      });

      return instance;
    };

    _this.createToastInstance = function (title, settings) {
      var id = ++ToastManager.idCounter;

      return {
        id: id,
        title: title,
        description: settings.description,
        hasCloseButton: settings.hasCloseButton || true,
        duration: settings.duration || 5,
        close: function close() {
          return _this.closeToast(id);
        },
        type: settings.type
      };
    };

    _this.closeToast = function (id) {
      _this.setState(function (previousState) {
        return {
          toasts: previousState.toasts.map(function (toast) {
            if (toast.id === id) {
              return _extends({}, toast, {
                isShown: false
              });
            }
            return toast;
          })
        };
      });
    };

    _this.removeToast = function (id) {
      _this.setState(function (previousState) {
        return {
          toasts: previousState.toasts.filter(function (toast) {
            return toast.id !== id;
          })
        };
      });
    };

    props.bindNotify(_this.notify);
    props.bindGetToasts(_this.getToasts);
    props.bindCloseAll(_this.closeAll);

    _this.state = {
      toasts: []
    };
    return _this;
  }

  /**
   * This will set isShown on the Toast which will close the toast.
   * It won't remove the toast until onExited triggers onRemove.
   */


  _createClass(ToastManager, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(
        'span',
        { className: wrapperClass },
        this.state.toasts.map(function (_ref) {
          var id = _ref.id,
              description = _ref.description,
              props = _objectWithoutProperties(_ref, ['id', 'description']);

          return React.createElement(
            Toast,
            _extends({ key: id, onRemove: function onRemove() {
                return _this2.removeToast(id);
              } }, props),
            description
          );
        })
      );
    }
  }]);

  return ToastManager;
}(React.PureComponent);

ToastManager.propTypes = {
  /**
   * Function called with the `this.notify` function.
   */
  bindNotify: PropTypes.func.isRequired,

  /**
   * Function called with the `this.getToasts` function.
   */
  bindGetToasts: PropTypes.func.isRequired,

  /**
   * Function called with the `this.closeAll` function.
   */
  bindCloseAll: PropTypes.func.isRequired
};
ToastManager.idCounter = 0;
export default ToastManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdE1hbmFnZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJjc3MiLCJQcm9wVHlwZXMiLCJUb2FzdCIsIndyYXBwZXJDbGFzcyIsIm1heFdpZHRoIiwibWFyZ2luIiwidG9wIiwibGVmdCIsInJpZ2h0IiwicG9zaXRpb24iLCJ6SW5kZXgiLCJwb2ludGVyRXZlbnRzIiwiVG9hc3RNYW5hZ2VyIiwicHJvcHMiLCJjb250ZXh0IiwiZ2V0VG9hc3RzIiwic3RhdGUiLCJ0b2FzdHMiLCJjbG9zZUFsbCIsImZvckVhY2giLCJ0b2FzdCIsImNsb3NlIiwibm90aWZ5IiwidGl0bGUiLCJzZXR0aW5ncyIsImluc3RhbmNlIiwiY3JlYXRlVG9hc3RJbnN0YW5jZSIsInNldFN0YXRlIiwicHJldmlvdXNTdGF0ZSIsImlkIiwiaWRDb3VudGVyIiwiZGVzY3JpcHRpb24iLCJoYXNDbG9zZUJ1dHRvbiIsImR1cmF0aW9uIiwiY2xvc2VUb2FzdCIsInR5cGUiLCJtYXAiLCJpc1Nob3duIiwicmVtb3ZlVG9hc3QiLCJmaWx0ZXIiLCJiaW5kTm90aWZ5IiwiYmluZEdldFRvYXN0cyIsImJpbmRDbG9zZUFsbCIsIlB1cmVDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0MsR0FBVCxRQUFvQixRQUFwQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLFNBQWxCOztBQUVBLElBQU1DLGVBQWVILElBQUk7QUFDdkJJLFlBQVUsR0FEYTtBQUV2QkMsVUFBUSxRQUZlO0FBR3ZCQyxPQUFLLENBSGtCO0FBSXZCQyxRQUFNLENBSmlCO0FBS3ZCQyxTQUFPLENBTGdCO0FBTXZCQyxZQUFVLE9BTmE7QUFPdkJDLFVBQVEsRUFQZTtBQVF2QkMsaUJBQWU7QUFS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QUEwRGhCLEtBQTFEO0FBQ0drQjtBQURILFdBREY7QUFLRCxTQU5BO0FBREgsT0FERjtBQVdEOzs7O0VBMUd1Q2hDLE1BQU00QyxhOztBQUEzQi9CLFksQ0FDWmdDLFMsR0FBWTtBQUNqQjs7O0FBR0FKLGNBQVl2QyxVQUFVNEMsSUFBVixDQUFlQyxVQUpWOztBQU1qQjs7O0FBR0FMLGlCQUFleEMsVUFBVTRDLElBQVYsQ0FBZUMsVUFUYjs7QUFXakI7OztBQUdBSixnQkFBY3pDLFVBQVU0QyxJQUFWLENBQWVDO0FBZFosQztBQURBbEMsWSxDQWtCWmtCLFMsR0FBWSxDO2VBbEJBbEIsWSIsImZpbGUiOiJUb2FzdE1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9Ub2FzdCdcblxuY29uc3Qgd3JhcHBlckNsYXNzID0gY3NzKHtcbiAgbWF4V2lkdGg6IDU2MCxcbiAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICByaWdodDogMCxcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogNjAsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJ1xufSlcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9hc3RNYW5hZ2VyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gY2FsbGVkIHdpdGggdGhlIGB0aGlzLm5vdGlmeWAgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYmluZE5vdGlmeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB3aXRoIHRoZSBgdGhpcy5nZXRUb2FzdHNgIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGJpbmRHZXRUb2FzdHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgd2l0aCB0aGUgYHRoaXMuY2xvc2VBbGxgIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGJpbmRDbG9zZUFsbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9XG5cbiAgc3RhdGljIGlkQ291bnRlciA9IDBcblxuICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xuICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KVxuXG4gICAgcHJvcHMuYmluZE5vdGlmeSh0aGlzLm5vdGlmeSlcbiAgICBwcm9wcy5iaW5kR2V0VG9hc3RzKHRoaXMuZ2V0VG9hc3RzKVxuICAgIHByb3BzLmJpbmRDbG9zZUFsbCh0aGlzLmNsb3NlQWxsKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRvYXN0czogW11cbiAgICB9XG4gIH1cblxuICBnZXRUb2FzdHMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUudG9hc3RzXG4gIH1cblxuICBjbG9zZUFsbCA9ICgpID0+IHtcbiAgICB0aGlzLmdldFRvYXN0cygpLmZvckVhY2godG9hc3QgPT4gdG9hc3QuY2xvc2UoKSlcbiAgfVxuXG4gIG5vdGlmeSA9ICh0aXRsZSwgc2V0dGluZ3MpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuY3JlYXRlVG9hc3RJbnN0YW5jZSh0aXRsZSwgc2V0dGluZ3MpXG5cbiAgICB0aGlzLnNldFN0YXRlKHByZXZpb3VzU3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9hc3RzOiBbaW5zdGFuY2UsIC4uLnByZXZpb3VzU3RhdGUudG9hc3RzXVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gaW5zdGFuY2VcbiAgfVxuXG4gIGNyZWF0ZVRvYXN0SW5zdGFuY2UgPSAodGl0bGUsIHNldHRpbmdzKSA9PiB7XG4gICAgY29uc3QgaWQgPSArK1RvYXN0TWFuYWdlci5pZENvdW50ZXJcblxuICAgIHJldHVybiB7XG4gICAgICBpZCxcbiAgICAgIHRpdGxlLFxuICAgICAgZGVzY3JpcHRpb246IHNldHRpbmdzLmRlc2NyaXB0aW9uLFxuICAgICAgaGFzQ2xvc2VCdXR0b246IHNldHRpbmdzLmhhc0Nsb3NlQnV0dG9uIHx8IHRydWUsXG4gICAgICBkdXJhdGlvbjogc2V0dGluZ3MuZHVyYXRpb24gfHwgNSxcbiAgICAgIGNsb3NlOiAoKSA9PiB0aGlzLmNsb3NlVG9hc3QoaWQpLFxuICAgICAgdHlwZTogc2V0dGluZ3MudHlwZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgc2V0IGlzU2hvd24gb24gdGhlIFRvYXN0IHdoaWNoIHdpbGwgY2xvc2UgdGhlIHRvYXN0LlxuICAgKiBJdCB3b24ndCByZW1vdmUgdGhlIHRvYXN0IHVudGlsIG9uRXhpdGVkIHRyaWdnZXJzIG9uUmVtb3ZlLlxuICAgKi9cbiAgY2xvc2VUb2FzdCA9IGlkID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZpb3VzU3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9hc3RzOiBwcmV2aW91c1N0YXRlLnRvYXN0cy5tYXAodG9hc3QgPT4ge1xuICAgICAgICAgIGlmICh0b2FzdC5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnRvYXN0LFxuICAgICAgICAgICAgICBpc1Nob3duOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdG9hc3RcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVtb3ZlVG9hc3QgPSBpZCA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2aW91c1N0YXRlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvYXN0czogcHJldmlvdXNTdGF0ZS50b2FzdHMuZmlsdGVyKHRvYXN0ID0+IHRvYXN0LmlkICE9PSBpZClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc30+XG4gICAgICAgIHt0aGlzLnN0YXRlLnRvYXN0cy5tYXAoKHsgaWQsIGRlc2NyaXB0aW9uLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUb2FzdCBrZXk9e2lkfSBvblJlbW92ZT17KCkgPT4gdGhpcy5yZW1vdmVUb2FzdChpZCl9IHsuLi5wcm9wc30+XG4gICAgICAgICAgICAgIHtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgIDwvVG9hc3Q+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvc3Bhbj5cbiAgICApXG4gIH1cbn1cbiJdfQ==