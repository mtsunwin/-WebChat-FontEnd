var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { css } from 'ui-box';
import { colors } from '../../colors';

var loadingKeyframes = css.keyframes('loading', {
  '0%': {
    transform: 'rotate(0)'
  },
  '100%': {
    transform: 'rotate(360deg)'
  }
});

var loadingCircleKeyframes = css.keyframes('loading-circle', {
  '0%': {
    strokeDashoffset: 600
  },
  '100%': {
    strokeDashoffset: 0
  }
});

var outer = {
  animation: loadingKeyframes + ' 2s linear infinite'
};

var inner = {
  strokeDashoffset: 600,
  strokeDasharray: 300,
  strokeWidth: 12,
  strokeMiterlimit: 10,
  strokeLinecap: 'round',
  animation: loadingCircleKeyframes + ' 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite',
  stroke: colors.neutral['500'],
  fill: 'transparent'
};

var Spinner = function (_PureComponent) {
  _inherits(Spinner, _PureComponent);

  function Spinner() {
    _classCallCheck(this, Spinner);

    return _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).apply(this, arguments));
  }

  _createClass(Spinner, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          size = _props.size,
          props = _objectWithoutProperties(_props, ['size']);

      return React.createElement(
        Box,
        _extends({ width: size, height: size, lineHeight: 0 }, props),
        React.createElement(
          Box,
          { is: 'svg', css: outer, x: '0px', y: '0px', viewBox: '0 0 150 150' },
          React.createElement(Box, { is: 'circle', css: inner, cx: '75', cy: '75', r: '60' })
        )
      );
    }
  }]);

  return Spinner;
}(PureComponent);

Spinner.propTypes = _extends({}, Box.propTypes, {

  /**
   * The size of the spinner.
   */
  size: PropTypes.number
});
Spinner.defaultProps = {
  size: 40
};
export default Spinner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcGlubmVyL3NyYy9TcGlubmVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIkJveCIsImNzcyIsImNvbG9ycyIsImxvYWRpbmdLZXlmcmFtZXMiLCJrZXlmcmFtZXMiLCJ0cmFuc2Zvcm0iLCJsb2FkaW5nQ2lyY2xlS2V5ZnJhbWVzIiwic3Ryb2tlRGFzaG9mZnNldCIsIm91dGVyIiwiYW5pbWF0aW9uIiwiaW5uZXIiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VXaWR0aCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlIiwibmV1dHJhbCIsImZpbGwiLCJTcGlubmVyIiwicHJvcHMiLCJzaXplIiwicHJvcFR5cGVzIiwibnVtYmVyIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLElBQWNDLEdBQWQsUUFBeUIsUUFBekI7QUFDQSxTQUFTQyxNQUFULFFBQXVCLGNBQXZCOztBQUVBLElBQU1DLG1CQUFtQkYsSUFBSUcsU0FBSixDQUFjLFNBQWQsRUFBeUI7QUFDaEQsUUFBTTtBQUNKQyxlQUFXO0FBRFAsR0FEMEM7QUFJaEQsVUFBUTtBQUNOQSxlQUFXO0FBREw7QUFKd0MsQ0FBekIsQ0FBekI7O0FBU0EsSUFBTUMseUJBQXlCTCxJQUFJRyxTQUFKLENBQWMsZ0JBQWQsRUFBZ0M7QUFDN0QsUUFBTTtBQUNKRyxzQkFBa0I7QUFEZCxHQUR1RDtBQUk3RCxVQUFRO0FBQ05BLHNCQUFrQjtBQURaO0FBSnFELENBQWhDLENBQS9COztBQVNBLElBQU1DLFFBQVE7QUFDWkMsYUFBY04sZ0JBQWQ7QUFEWSxDQUFkOztBQUlBLElBQU1PLFFBQVE7QUFDWkgsb0JBQWtCLEdBRE47QUFFWkksbUJBQWlCLEdBRkw7QUFHWkMsZUFBYSxFQUhEO0FBSVpDLG9CQUFrQixFQUpOO0FBS1pDLGlCQUFlLE9BTEg7QUFNWkwsYUFBY0gsc0JBQWQsc0RBTlk7QUFPWlMsVUFBUWIsT0FBT2MsT0FBUCxDQUFlLEtBQWYsQ0FQSTtBQVFaQyxRQUFNO0FBUk0sQ0FBZDs7SUFXcUJDLE87Ozs7Ozs7Ozs7OzZCQWlCVjtBQUFBLG1CQUNvQixLQUFLQyxLQUR6QjtBQUFBLFVBQ0NDLElBREQsVUFDQ0EsSUFERDtBQUFBLFVBQ1VELEtBRFY7O0FBRVAsYUFDRTtBQUFDLFdBQUQ7QUFBQSxtQkFBSyxPQUFPQyxJQUFaLEVBQWtCLFFBQVFBLElBQTFCLEVBQWdDLFlBQVksQ0FBNUMsSUFBbURELEtBQW5EO0FBQ0U7QUFBQyxhQUFEO0FBQUEsWUFBSyxJQUFHLEtBQVIsRUFBYyxLQUFLWCxLQUFuQixFQUEwQixHQUFFLEtBQTVCLEVBQWtDLEdBQUUsS0FBcEMsRUFBMEMsU0FBUSxhQUFsRDtBQUNFLDhCQUFDLEdBQUQsSUFBSyxJQUFHLFFBQVIsRUFBaUIsS0FBS0UsS0FBdEIsRUFBNkIsSUFBRyxJQUFoQyxFQUFxQyxJQUFHLElBQXhDLEVBQTZDLEdBQUUsSUFBL0M7QUFERjtBQURGLE9BREY7QUFPRDs7OztFQTFCa0NaLGE7O0FBQWhCb0IsTyxDQUNaRyxTLGdCQUlGckIsSUFBSXFCLFM7O0FBRVA7OztBQUdBRCxRQUFNckIsVUFBVXVCOztBQVZDSixPLENBYVpLLFksR0FBZTtBQUNwQkgsUUFBTTtBQURjLEM7ZUFiSEYsTyIsImZpbGUiOiJTcGlubmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3gsIHsgY3NzIH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi4vLi4vY29sb3JzJ1xuXG5jb25zdCBsb2FkaW5nS2V5ZnJhbWVzID0gY3NzLmtleWZyYW1lcygnbG9hZGluZycsIHtcbiAgJzAlJzoge1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgwKSdcbiAgfSxcbiAgJzEwMCUnOiB7XG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDM2MGRlZyknXG4gIH1cbn0pXG5cbmNvbnN0IGxvYWRpbmdDaXJjbGVLZXlmcmFtZXMgPSBjc3Mua2V5ZnJhbWVzKCdsb2FkaW5nLWNpcmNsZScsIHtcbiAgJzAlJzoge1xuICAgIHN0cm9rZURhc2hvZmZzZXQ6IDYwMFxuICB9LFxuICAnMTAwJSc6IHtcbiAgICBzdHJva2VEYXNob2Zmc2V0OiAwXG4gIH1cbn0pXG5cbmNvbnN0IG91dGVyID0ge1xuICBhbmltYXRpb246IGAke2xvYWRpbmdLZXlmcmFtZXN9IDJzIGxpbmVhciBpbmZpbml0ZWBcbn1cblxuY29uc3QgaW5uZXIgPSB7XG4gIHN0cm9rZURhc2hvZmZzZXQ6IDYwMCxcbiAgc3Ryb2tlRGFzaGFycmF5OiAzMDAsXG4gIHN0cm9rZVdpZHRoOiAxMixcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMTAsXG4gIHN0cm9rZUxpbmVjYXA6ICdyb3VuZCcsXG4gIGFuaW1hdGlvbjogYCR7bG9hZGluZ0NpcmNsZUtleWZyYW1lc30gMS42cyBjdWJpYy1iZXppZXIoMC40LCAwLjE1LCAwLjYsIDAuODUpIGluZmluaXRlYCxcbiAgc3Ryb2tlOiBjb2xvcnMubmV1dHJhbFsnNTAwJ10sXG4gIGZpbGw6ICd0cmFuc3BhcmVudCdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3Bpbm5lciBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBCb3ggY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLkJveC5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2l6ZSBvZiB0aGUgc3Bpbm5lci5cbiAgICAgKi9cbiAgICBzaXplOiBQcm9wVHlwZXMubnVtYmVyXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNpemU6IDQwXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBzaXplLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAoXG4gICAgICA8Qm94IHdpZHRoPXtzaXplfSBoZWlnaHQ9e3NpemV9IGxpbmVIZWlnaHQ9ezB9IHsuLi5wcm9wc30+XG4gICAgICAgIDxCb3ggaXM9XCJzdmdcIiBjc3M9e291dGVyfSB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMTUwIDE1MFwiPlxuICAgICAgICAgIDxCb3ggaXM9XCJjaXJjbGVcIiBjc3M9e2lubmVyfSBjeD1cIjc1XCIgY3k9XCI3NVwiIHI9XCI2MFwiIC8+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9XG59XG4iXX0=