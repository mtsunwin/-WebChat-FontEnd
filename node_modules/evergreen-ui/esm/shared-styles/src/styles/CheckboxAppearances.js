var _extends2;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { colors } from '../../../colors';
import baseStyle from './controlBaseStyle';

var disabledState = '&[disabled] + div';
var hoverState = '&:not([disabled]):hover + div';
var focusState = '&:not([disabled]):focus + div';
var activeState = '&:not([disabled]):active + div';
var checkedState = '&:checked + div';
var checkedActiveState = '&:not([disabled]):checked:active + div';
var checkedDisabledState = '&[disabled]:checked + div';

var hiddenCheckboxStyle = {
  border: '0',
  clip: 'rect(1px, 1px, 1px, 1px)',
  height: '1',
  overflow: 'hidden',
  padding: '0',
  position: 'absolute',
  whiteSpace: 'nowrap',
  width: '1',
  opacity: '0'
};

var CheckboxAppearances = {
  default: _extends({}, hiddenCheckboxStyle, (_extends2 = {
    '& + div > svg': {
      display: 'none'
    },
    '& + div': _extends({}, baseStyle, {
      color: 'white',
      backgroundColor: 'white',
      backgroundImage: 'linear-gradient(to top, ' + colors.neutral['5A'] + ', white)',
      boxShadow: 'inset 0 0 0 1px ' + colors.neutral['20A'] + ', inset 0 -1px 1px 0 ' + colors.neutral['10A']
    })
  }, _defineProperty(_extends2, disabledState, {
    cursor: 'not-allowed',
    boxShadow: 'inset 0 0 0 1px ' + colors.neutral['20A'],
    backgroundColor: colors.neutral['5A'],
    backgroundImage: 'none'
  }), _defineProperty(_extends2, hoverState, {
    backgroundImage: 'linear-gradient(to top, ' + colors.neutral['7A'] + ', ' + colors.neutral['3A'] + ' )',
    boxShadow: 'inset 0 0 0 1px ' + colors.neutral['40A'] + ', inset 0 -1px 1px 0 ' + colors.neutral['15A']
  }), _defineProperty(_extends2, focusState, {
    boxShadow: '0 0 0 2px ' + colors.blue['20A'] + ', inset 0 0 0 1px ' + colors.neutral['70A'] + ', inset 0 -1px 1px 0 ' + colors.neutral['10A']
  }), _defineProperty(_extends2, activeState, {
    color: colors.blue['1000'],
    backgroundImage: 'none',
    backgroundColor: colors.blue['10A'],
    boxShadow: 'inset 0 0 0 1px ' + colors.blue['80A']
  }), _defineProperty(_extends2, checkedState, {
    backgroundColor: colors.blue['500'],
    color: 'white',
    backgroundImage: 'linear-gradient(to top, ' + colors.blue['600'] + ', ' + colors.blue['400'] + ')',
    boxShadow: 'inset 0 0 0 1px ' + colors.neutral['30A'] + ', inset 0 -1px 1px 0 ' + colors.neutral['30A'],
    '& > svg': {
      display: 'block'
    }
  }), _defineProperty(_extends2, checkedDisabledState, {
    color: colors.neutral['300'],
    backgroundColor: 'white',
    backgroundImage: 'linear-gradient(to top, ' + colors.neutral['5A'] + ', white)',
    boxShadow: 'inset 0 0 0 1px ' + colors.neutral['20A'] + ', inset 0 -1px 1px 0 ' + colors.neutral['10A'],
    '& > svg': {
      display: 'block'
    }
  }), _defineProperty(_extends2, checkedActiveState, {
    backgroundColor: colors.blue['500'],
    color: 'white',
    backgroundImage: 'linear-gradient(to top, ' + colors.blue['800'] + ', ' + colors.blue['900'] + ')',
    boxShadow: 'inset 0 0 0 1px ' + colors.neutral['30A'] + ', inset 0 -1px 1px 0 ' + colors.neutral['30A'],
    '& > svg': {
      display: 'block'
    }
  }), _extends2))
};

export default CheckboxAppearances;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQtc3R5bGVzL3NyYy9zdHlsZXMvQ2hlY2tib3hBcHBlYXJhbmNlcy5qcyJdLCJuYW1lcyI6WyJjb2xvcnMiLCJiYXNlU3R5bGUiLCJkaXNhYmxlZFN0YXRlIiwiaG92ZXJTdGF0ZSIsImZvY3VzU3RhdGUiLCJhY3RpdmVTdGF0ZSIsImNoZWNrZWRTdGF0ZSIsImNoZWNrZWRBY3RpdmVTdGF0ZSIsImNoZWNrZWREaXNhYmxlZFN0YXRlIiwiaGlkZGVuQ2hlY2tib3hTdHlsZSIsImJvcmRlciIsImNsaXAiLCJoZWlnaHQiLCJvdmVyZmxvdyIsInBhZGRpbmciLCJwb3NpdGlvbiIsIndoaXRlU3BhY2UiLCJ3aWR0aCIsIm9wYWNpdHkiLCJDaGVja2JveEFwcGVhcmFuY2VzIiwiZGVmYXVsdCIsImRpc3BsYXkiLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRJbWFnZSIsIm5ldXRyYWwiLCJib3hTaGFkb3ciLCJjdXJzb3IiLCJibHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxNQUFULFFBQXVCLGlCQUF2QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0Isb0JBQXRCOztBQUVBLElBQU1DLGdCQUFnQixtQkFBdEI7QUFDQSxJQUFNQyxhQUFhLCtCQUFuQjtBQUNBLElBQU1DLGFBQWEsK0JBQW5CO0FBQ0EsSUFBTUMsY0FBYyxnQ0FBcEI7QUFDQSxJQUFNQyxlQUFlLGlCQUFyQjtBQUNBLElBQU1DLHFCQUFxQix3Q0FBM0I7QUFDQSxJQUFNQyx1QkFBdUIsMkJBQTdCOztBQUVBLElBQU1DLHNCQUFzQjtBQUMxQkMsVUFBUSxHQURrQjtBQUUxQkMsUUFBTSwwQkFGb0I7QUFHMUJDLFVBQVEsR0FIa0I7QUFJMUJDLFlBQVUsUUFKZ0I7QUFLMUJDLFdBQVMsR0FMaUI7QUFNMUJDLFlBQVUsVUFOZ0I7QUFPMUJDLGNBQVksUUFQYztBQVExQkMsU0FBTyxHQVJtQjtBQVMxQkMsV0FBUztBQVRpQixDQUE1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IjpbImltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4uLy4uLy4uL2NvbG9ycydcbmltcG9ydCBiYXNlU3R5bGUgZnJvbSAnLi9jb250cm9sQmFzZVN0eWxlJ1xuXG5jb25zdCBkaXNhYmxlZFN0YXRlID0gJyZbZGlzYWJsZWRdICsgZGl2J1xuY29uc3QgaG92ZXJTdGF0ZSA9ICcmOm5vdChbZGlzYWJsZWRdKTpob3ZlciArIGRpdidcbmNvbnN0IGZvY3VzU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgKyBkaXYnXG5jb25zdCBhY3RpdmVTdGF0ZSA9ICcmOm5vdChbZGlzYWJsZWRdKTphY3RpdmUgKyBkaXYnXG5jb25zdCBjaGVja2VkU3RhdGUgPSAnJjpjaGVja2VkICsgZGl2J1xuY29uc3QgY2hlY2tlZEFjdGl2ZVN0YXRlID0gJyY6bm90KFtkaXNhYmxlZF0pOmNoZWNrZWQ6YWN0aXZlICsgZGl2J1xuY29uc3QgY2hlY2tlZERpc2FibGVkU3RhdGUgPSAnJltkaXNhYmxlZF06Y2hlY2tlZCArIGRpdidcblxuY29uc3QgaGlkZGVuQ2hlY2tib3hTdHlsZSA9IHtcbiAgYm9yZGVyOiAnMCcsXG4gIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICBoZWlnaHQ6ICcxJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBwYWRkaW5nOiAnMCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgd2lkdGg6ICcxJyxcbiAgb3BhY2l0eTogJzAnXG59XG5cbmNvbnN0IENoZWNrYm94QXBwZWFyYW5jZXMgPSB7XG4gIGRlZmF1bHQ6IHtcbiAgICAuLi5oaWRkZW5DaGVja2JveFN0eWxlLFxuICAgICcmICsgZGl2ID4gc3ZnJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICAnJiArIGRpdic6IHtcbiAgICAgIC4uLmJhc2VTdHlsZSxcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzVBJ11cbiAgICAgIH0sIHdoaXRlKWAsXG4gICAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzIwQSddXG4gICAgICB9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtjb2xvcnMubmV1dHJhbFsnMTBBJ119YFxuICAgIH0sXG4gICAgW2Rpc2FibGVkU3RhdGVdOiB7XG4gICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCcsXG4gICAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtjb2xvcnMubmV1dHJhbFsnMjBBJ119YCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLm5ldXRyYWxbJzVBJ10sXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJ1xuICAgIH0sXG4gICAgW2hvdmVyU3RhdGVdOiB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAke2NvbG9ycy5uZXV0cmFsWyc3QSddfSwgJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzNBJ11cbiAgICAgIH0gKWAsXG4gICAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzQwQSddXG4gICAgICB9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtjb2xvcnMubmV1dHJhbFsnMTVBJ119YFxuICAgIH0sXG4gICAgW2ZvY3VzU3RhdGVdOiB7XG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAycHggJHtjb2xvcnMuYmx1ZVsnMjBBJ119LCBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzcwQSddXG4gICAgICB9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtjb2xvcnMubmV1dHJhbFsnMTBBJ119YFxuICAgIH0sXG4gICAgW2FjdGl2ZVN0YXRlXToge1xuICAgICAgY29sb3I6IGNvbG9ycy5ibHVlWycxMDAwJ10sXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmJsdWVbJzEwQSddLFxuICAgICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7Y29sb3JzLmJsdWVbJzgwQSddfWBcbiAgICB9LFxuICAgIFtjaGVja2VkU3RhdGVdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5ibHVlWyc1MDAnXSxcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgJHtjb2xvcnMuYmx1ZVsnNjAwJ119LCAke1xuICAgICAgICBjb2xvcnMuYmx1ZVsnNDAwJ11cbiAgICAgIH0pYCxcbiAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnMzBBJ11cbiAgICAgIH0sIGluc2V0IDAgLTFweCAxcHggMCAke2NvbG9ycy5uZXV0cmFsWyczMEEnXX1gLFxuICAgICAgJyYgPiBzdmcnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgIFtjaGVja2VkRGlzYWJsZWRTdGF0ZV06IHtcbiAgICAgIGNvbG9yOiBjb2xvcnMubmV1dHJhbFsnMzAwJ10sXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnNUEnXVxuICAgICAgfSwgd2hpdGUpYCxcbiAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnMjBBJ11cbiAgICAgIH0sIGluc2V0IDAgLTFweCAxcHggMCAke2NvbG9ycy5uZXV0cmFsWycxMEEnXX1gLFxuICAgICAgJyYgPiBzdmcnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgIFtjaGVja2VkQWN0aXZlU3RhdGVdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5ibHVlWyc1MDAnXSxcbiAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgJHtjb2xvcnMuYmx1ZVsnODAwJ119LCAke1xuICAgICAgICBjb2xvcnMuYmx1ZVsnOTAwJ11cbiAgICAgIH0pYCxcbiAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnMzBBJ11cbiAgICAgIH0sIGluc2V0IDAgLTFweCAxcHggMCAke2NvbG9ycy5uZXV0cmFsWyczMEEnXX1gLFxuICAgICAgJyYgPiBzdmcnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tib3hBcHBlYXJhbmNlc1xuIl19