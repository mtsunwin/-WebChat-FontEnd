var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Position, Positioner } from '../../positioner';
import PopoverStateless from './PopoverStateless';

var Popover = function (_Component) {
  _inherits(Popover, _Component);

  function Popover(props) {
    _classCallCheck(this, Popover);

    var _this = _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).call(this, props));

    _this.bringFocusInside = function () {
      if (!_this.props.bringFocusInside) return;

      // Always delay focus manipulation to just before repaint to prevent scroll jumping
      return requestAnimationFrame(function () {
        // Container ref may be undefined between component mounting and Portal rendering
        // activeElement may be undefined in some rare cases in IE

        if (_this.popoverNode == null || // eslint-disable-line eqeqeq, no-eq-null
        document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null
        !_this.props.isShown) {
          return;
        }

        var isFocusOutsideModal = !_this.popoverNode.contains(document.activeElement);
        if (isFocusOutsideModal) {
          // Element marked autofocus has higher priority than the other clowns
          var autofocusElement = _this.popoverNode.querySelector('[autofocus]');
          var wrapperElement = _this.popoverNode.querySelector('[tabindex]');
          var buttonElement = _this.popoverNode.querySelector('button');

          if (autofocusElement) {
            autofocusElement.focus();
          } else if (wrapperElement) {
            wrapperElement.focus();
          } else if (buttonElement) {
            buttonElement.focus();
          }
        }
      });
    };

    _this.bringFocusBackToTarget = function () {
      return requestAnimationFrame(function () {
        if (_this.popoverNode == null || // eslint-disable-line eqeqeq, no-eq-null
        document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null
        ) {
            return;
          }

        var isFocusInsideModal = _this.popoverNode.contains(document.activeElement);

        // Bring back focus on the target.
        if (_this.targetRef && (document.activeElement === document.body || isFocusInsideModal)) {
          _this.targetRef.focus();
        }
      });
    };

    _this.onBodyClick = function (e) {
      // Ignore clicks on the popover or button
      if (_this.targetRef === e.target) {
        return;
      }

      if (_this.popoverNode && (_this.popoverNode === e.target || _this.popoverNode.contains(e.target))) {
        return;
      }

      _this.close();
    };

    _this.onEsc = function (e) {
      // Esc key
      if (e.keyCode === 27) {
        _this.close();
      }
    };

    _this.toggle = function () {
      if (_this.state.isShown) {
        _this.close();
      } else {
        _this.open();
      }
    };

    _this.open = function () {
      if (_this.state.isShown) {
        return;
      }

      _this.setState({ isShown: true });
      document.body.addEventListener('click', _this.onBodyClick, false);
      document.body.addEventListener('keydown', _this.onEsc, false);

      _this.props.onOpen();
    };

    _this.close = function () {
      if (!_this.state.isShown) {
        return;
      }

      _this.setState({ isShown: false });
      document.body.removeEventListener('click', _this.onBodyClick, false);
      document.body.removeEventListener('keydown', _this.onEsc, false);

      _this.bringFocusBackToTarget();

      _this.props.onClose();
    };

    _this.handleOpenComplete = function () {
      _this.bringFocusInside();
      _this.props.onOpenComplete();
    };

    _this.handleCloseComplete = function () {
      _this.props.onCloseComplete();
    };

    _this.renderTarget = function (_ref) {
      var getRef = _ref.getRef,
          isShown = _ref.isShown;
      var children = _this.props.children;


      var getTargetRef = function getTargetRef(ref) {
        _this.targetRef = ref;
        getRef(ref);
      };

      if (typeof children === 'function') {
        return children({
          toggle: _this.toggle,
          getRef: getTargetRef,
          isShown: isShown
        });
      }

      return React.cloneElement(children, {
        onClick: _this.toggle,
        innerRef: getTargetRef,
        role: 'button',
        'aria-expanded': isShown,
        'aria-haspopup': true
      });
    };

    _this.state = {
      isShown: props.isShown
    };
    return _this;
  }

  _createClass(Popover, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.body.removeEventListener('click', this.onBodyClick, false);
      document.body.removeEventListener('keydown', this.onEsc, false);
    }

    /**
     * Methods borrowed from BlueprintJS
     * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          zIndex = _props.zIndex,
          isShown = _props.isShown,
          content = _props.content,
          display = _props.display,
          minWidth = _props.minWidth,
          position = _props.position,
          minHeight = _props.minHeight,
          statelessProps = _props.statelessProps,
          animationDuration = _props.animationDuration,
          onCloseComplete = _props.onCloseComplete;
      var stateIsShown = this.state.isShown;


      var shown = isShown || stateIsShown;

      return React.createElement(
        Positioner,
        {
          target: function target(_ref2) {
            var getRef = _ref2.getRef,
                isShown = _ref2.isShown,
                targetWidth = _ref2.targetWidth;

            return _this2.renderTarget({ getRef: getRef, isShown: isShown, targetWidth: targetWidth });
          },
          zIndex: zIndex,
          isShown: shown,
          position: position,
          animationDuration: animationDuration,
          onOpenComplete: this.handleOpenComplete,
          onCloseComplete: onCloseComplete
        },
        function (_ref3) {
          var css = _ref3.css,
              style = _ref3.style,
              state = _ref3.state,
              getRef = _ref3.getRef;
          return React.createElement(
            PopoverStateless,
            _extends({
              innerRef: function innerRef(ref) {
                _this2.popoverNode = ref;
                getRef(ref);
              },
              'data-state': state,
              css: css,
              style: style,
              display: display,
              minWidth: minWidth,
              minHeight: minHeight
            }, statelessProps),
            typeof content === 'function' ? content({ close: _this2.close }) : content
          );
        }
      );
    }
  }]);

  return Popover;
}(Component);

Popover.propTypes = {
  /**
   * The position the Popover is on. Smart positioning might override this.
   */
  position: PropTypes.oneOf(Object.keys(Position)),

  /**
   * When true, the Popover is manually shown.
   */
  isShown: PropTypes.bool,

  /**
   * The content of the Popover.
   */
  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * The target button of the Popover.
   * When a function the following arguments are passed:
   * ({ toggle: Function -> Void, getRef: Function -> Ref, isShown: Bool })
   */
  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,

  /**
   * The display property passed to the Popover card.
   */
  display: PropTypes.string,

  /**
   * The min width of the Popover card.
   */
  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * The min height of the Popover card.
   */
  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Properties passed through to the Popover card.
   */
  statelessProps: PropTypes.objectOf(PopoverStateless.propTypes),

  /**
   * Duration of the animation.
   */
  animationDuration: PropTypes.number,

  /**
   * The z-index of the Popover card.
   */
  zIndex: PropTypes.number,

  /**
   * Function called when the Popover opens.
   */
  onOpen: PropTypes.func.isRequired,

  /**
   * Function fired when Popover closes.
   */
  onClose: PropTypes.func.isRequired,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: PropTypes.func.isRequired,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: PropTypes.func.isRequired,

  /**
   * When true, bring focus inside of the Popover on open.
   */
  bringFocusInside: PropTypes.bool
};
Popover.defaultProps = {
  position: Position.BOTTOM,
  isShown: false,
  minWidth: 200,
  minHeight: 40,
  animationDuration: 300,
  zIndex: 40,
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  onOpenComplete: function onOpenComplete() {},
  onCloseComplete: function onCloseComplete() {},
  bringFocusInside: true
};
export default Popover;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,