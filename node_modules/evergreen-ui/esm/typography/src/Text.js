var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import FontFamilies from './styles/FontFamilies';
import TextStyles from './styles/TextStyles';
import TextUppercaseStyles from './styles/TextUppercaseStyles';
import TextColors from './styles/TextColors';

var isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;

var Text = function (_PureComponent) {
  _inherits(Text, _PureComponent);

  function Text() {
    _classCallCheck(this, Text);

    return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  _createClass(Text, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          size = _props.size,
          color = _props.color,
          textStyles = _props.textStyles,
          textUppercaseStyles = _props.textUppercaseStyles,
          fontFamily = _props.fontFamily,
          isUppercase = _props.isUppercase,
          props = _objectWithoutProperties(_props, ['size', 'color', 'textStyles', 'textUppercaseStyles', 'fontFamily', 'isUppercase']);

      var textStyle = textStyles[size];

      if (isUppercase) {
        // Only 100 and 200 support uppercase styles atm
        // Fallback on non uppercase atm
        if (Object.prototype.hasOwnProperty.call(textUppercaseStyles, size)) {
          textStyle = textUppercaseStyles[size];
        } else if (isDev) {
          console.error('Uppercase ' + size + ' not supported. <Text isUppercase> only supports the following sizes: ' + JSON.stringify(Object.keys(textUppercaseStyles).map(Number)));
        }
      }

      return React.createElement(Box, _extends({
        is: 'span'
      }, color ? { color: TextColors[color] || color } : {}, {
        fontFamily: FontFamilies[fontFamily] || fontFamily
      }, textStyle, props));
    }
  }]);

  return Text;
}(PureComponent);

Text.propTypes = _extends({}, Box.propTypes, {

  /**
   * Size of the text style.
   * Can be: 100, 200, 300, 400, 500, 600, 700, 800, 900.
   */
  size: PropTypes.oneOf(Object.keys(TextStyles).map(Number)),

  /**
   * Font family.
   * Can be: ui, display or mono
   */
  fontFamily: PropTypes.oneOf(Object.keys(FontFamilies)),

  /**
   * Sets the text to uppercase.
   * Only sizes 100 and 200 support uppercase styles at the moment.
   */
  isUppercase: PropTypes.bool,

  /**
   * The text styles available.
   * This is overridden by other text components that implement Text as the base.
   * You should avoid setting this manually.
   */
  textStyles: PropTypes.object,

  /**
   * The uppercase text styles.
   * You should avoid setting this manually.
   */
  textUppercaseStyles: PropTypes.object
});
Text.defaultProps = {
  size: 500,
  color: 'default',
  fontFamily: 'ui',
  textStyles: TextStyles,
  textUppercaseStyles: TextUppercaseStyles
};
export default Text;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBvZ3JhcGh5L3NyYy9UZXh0LmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIkJveCIsIkZvbnRGYW1pbGllcyIsIlRleHRTdHlsZXMiLCJUZXh0VXBwZXJjYXNlU3R5bGVzIiwiVGV4dENvbG9ycyIsImlzRGV2IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiVGV4dCIsInByb3BzIiwic2l6ZSIsImNvbG9yIiwidGV4dFN0eWxlcyIsInRleHRVcHBlcmNhc2VTdHlsZXMiLCJmb250RmFtaWx5IiwiaXNVcHBlcmNhc2UiLCJ0ZXh0U3R5bGUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zb2xlIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5cyIsIm1hcCIsIk51bWJlciIsInByb3BUeXBlcyIsIm9uZU9mIiwiYm9vbCIsIm9iamVjdCIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsR0FBUCxNQUFnQixRQUFoQjtBQUNBLE9BQU9DLFlBQVAsTUFBeUIsdUJBQXpCO0FBQ0EsT0FBT0MsVUFBUCxNQUF1QixxQkFBdkI7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQyw4QkFBaEM7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLHFCQUF2Qjs7QUFFQSxJQUFNQyxRQUFRQyxRQUFRQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsYUFBekIsSUFBMEMsQ0FBQ0YsUUFBUUMsR0FBUixDQUFZQyxRQUFyRTs7SUFFcUJDLEk7Ozs7Ozs7Ozs7OzZCQStDVjtBQUFBLG1CQVNILEtBQUtDLEtBVEY7QUFBQSxVQUVMQyxJQUZLLFVBRUxBLElBRks7QUFBQSxVQUdMQyxLQUhLLFVBR0xBLEtBSEs7QUFBQSxVQUlMQyxVQUpLLFVBSUxBLFVBSks7QUFBQSxVQUtMQyxtQkFMSyxVQUtMQSxtQkFMSztBQUFBLFVBTUxDLFVBTkssVUFNTEEsVUFOSztBQUFBLFVBT0xDLFdBUEssVUFPTEEsV0FQSztBQUFBLFVBUUZOLEtBUkU7O0FBV1AsVUFBSU8sWUFBWUosV0FBV0YsSUFBWCxDQUFoQjs7QUFFQSxVQUFJSyxXQUFKLEVBQWlCO0FBQ2Y7QUFDQTtBQUNBLFlBQUlFLE9BQU9DLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1AsbUJBQXJDLEVBQTBESCxJQUExRCxDQUFKLEVBQXFFO0FBQ25FTSxzQkFBWUgsb0JBQW9CSCxJQUFwQixDQUFaO0FBQ0QsU0FGRCxNQUVPLElBQUlOLEtBQUosRUFBVztBQUNoQmlCLGtCQUFRQyxLQUFSLGdCQUNlWixJQURmLDhFQUM0RmEsS0FBS0MsU0FBTCxDQUN4RlAsT0FBT1EsSUFBUCxDQUFZWixtQkFBWixFQUFpQ2EsR0FBakMsQ0FBcUNDLE1BQXJDLENBRHdGLENBRDVGO0FBS0Q7QUFDRjs7QUFFRCxhQUNFLG9CQUFDLEdBQUQ7QUFDRSxZQUFHO0FBREwsU0FFT2hCLFFBQVEsRUFBRUEsT0FBT1IsV0FBV1EsS0FBWCxLQUFxQkEsS0FBOUIsRUFBUixHQUFnRCxFQUZ2RDtBQUdFLG9CQUFZWCxhQUFhYyxVQUFiLEtBQTRCQTtBQUgxQyxTQUlNRSxTQUpOLEVBS01QLEtBTE4sRUFERjtBQVNEOzs7O0VBbkYrQlosYTs7QUFBYlcsSSxDQUNab0IsUyxnQkFJRjdCLElBQUk2QixTOztBQUVQOzs7O0FBSUFsQixRQUFNWixVQUFVK0IsS0FBVixDQUFnQlosT0FBT1EsSUFBUCxDQUFZeEIsVUFBWixFQUF3QnlCLEdBQXhCLENBQTRCQyxNQUE1QixDQUFoQixDOztBQUVOOzs7O0FBSUFiLGNBQVloQixVQUFVK0IsS0FBVixDQUFnQlosT0FBT1EsSUFBUCxDQUFZekIsWUFBWixDQUFoQixDOztBQUVaOzs7O0FBSUFlLGVBQWFqQixVQUFVZ0MsSTs7QUFFdkI7Ozs7O0FBS0FsQixjQUFZZCxVQUFVaUMsTTs7QUFFdEI7Ozs7QUFJQWxCLHVCQUFxQmYsVUFBVWlDOztBQXBDZHZCLEksQ0F1Q1p3QixZLEdBQWU7QUFDcEJ0QixRQUFNLEdBRGM7QUFFcEJDLFNBQU8sU0FGYTtBQUdwQkcsY0FBWSxJQUhRO0FBSXBCRixjQUFZWCxVQUpRO0FBS3BCWSx1QkFBcUJYO0FBTEQsQztlQXZDSE0sSSIsImZpbGUiOiJUZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IEZvbnRGYW1pbGllcyBmcm9tICcuL3N0eWxlcy9Gb250RmFtaWxpZXMnXG5pbXBvcnQgVGV4dFN0eWxlcyBmcm9tICcuL3N0eWxlcy9UZXh0U3R5bGVzJ1xuaW1wb3J0IFRleHRVcHBlcmNhc2VTdHlsZXMgZnJvbSAnLi9zdHlsZXMvVGV4dFVwcGVyY2FzZVN0eWxlcydcbmltcG9ydCBUZXh0Q29sb3JzIGZyb20gJy4vc3R5bGVzL1RleHRDb2xvcnMnXG5cbmNvbnN0IGlzRGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgIXByb2Nlc3MuZW52Lk5PREVfRU5WXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyB0aGUgQm94IGNvbXBvbmVudCBhcyB0aGUgYmFzZS5cbiAgICAgKi9cbiAgICAuLi5Cb3gucHJvcFR5cGVzLFxuXG4gICAgLyoqXG4gICAgICogU2l6ZSBvZiB0aGUgdGV4dCBzdHlsZS5cbiAgICAgKiBDYW4gYmU6IDEwMCwgMjAwLCAzMDAsIDQwMCwgNTAwLCA2MDAsIDcwMCwgODAwLCA5MDAuXG4gICAgICovXG4gICAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKFRleHRTdHlsZXMpLm1hcChOdW1iZXIpKSxcblxuICAgIC8qKlxuICAgICAqIEZvbnQgZmFtaWx5LlxuICAgICAqIENhbiBiZTogdWksIGRpc3BsYXkgb3IgbW9ub1xuICAgICAqL1xuICAgIGZvbnRGYW1pbHk6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhGb250RmFtaWxpZXMpKSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgdG8gdXBwZXJjYXNlLlxuICAgICAqIE9ubHkgc2l6ZXMgMTAwIGFuZCAyMDAgc3VwcG9ydCB1cHBlcmNhc2Ugc3R5bGVzIGF0IHRoZSBtb21lbnQuXG4gICAgICovXG4gICAgaXNVcHBlcmNhc2U6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgc3R5bGVzIGF2YWlsYWJsZS5cbiAgICAgKiBUaGlzIGlzIG92ZXJyaWRkZW4gYnkgb3RoZXIgdGV4dCBjb21wb25lbnRzIHRoYXQgaW1wbGVtZW50IFRleHQgYXMgdGhlIGJhc2UuXG4gICAgICogWW91IHNob3VsZCBhdm9pZCBzZXR0aW5nIHRoaXMgbWFudWFsbHkuXG4gICAgICovXG4gICAgdGV4dFN0eWxlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgIC8qKlxuICAgICAqIFRoZSB1cHBlcmNhc2UgdGV4dCBzdHlsZXMuXG4gICAgICogWW91IHNob3VsZCBhdm9pZCBzZXR0aW5nIHRoaXMgbWFudWFsbHkuXG4gICAgICovXG4gICAgdGV4dFVwcGVyY2FzZVN0eWxlczogUHJvcFR5cGVzLm9iamVjdFxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBzaXplOiA1MDAsXG4gICAgY29sb3I6ICdkZWZhdWx0JyxcbiAgICBmb250RmFtaWx5OiAndWknLFxuICAgIHRleHRTdHlsZXM6IFRleHRTdHlsZXMsXG4gICAgdGV4dFVwcGVyY2FzZVN0eWxlczogVGV4dFVwcGVyY2FzZVN0eWxlc1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNpemUsXG4gICAgICBjb2xvcixcbiAgICAgIHRleHRTdHlsZXMsXG4gICAgICB0ZXh0VXBwZXJjYXNlU3R5bGVzLFxuICAgICAgZm9udEZhbWlseSxcbiAgICAgIGlzVXBwZXJjYXNlLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgbGV0IHRleHRTdHlsZSA9IHRleHRTdHlsZXNbc2l6ZV1cblxuICAgIGlmIChpc1VwcGVyY2FzZSkge1xuICAgICAgLy8gT25seSAxMDAgYW5kIDIwMCBzdXBwb3J0IHVwcGVyY2FzZSBzdHlsZXMgYXRtXG4gICAgICAvLyBGYWxsYmFjayBvbiBub24gdXBwZXJjYXNlIGF0bVxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0ZXh0VXBwZXJjYXNlU3R5bGVzLCBzaXplKSkge1xuICAgICAgICB0ZXh0U3R5bGUgPSB0ZXh0VXBwZXJjYXNlU3R5bGVzW3NpemVdXG4gICAgICB9IGVsc2UgaWYgKGlzRGV2KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFVwcGVyY2FzZSAke3NpemV9IG5vdCBzdXBwb3J0ZWQuIDxUZXh0IGlzVXBwZXJjYXNlPiBvbmx5IHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgc2l6ZXM6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0ZXh0VXBwZXJjYXNlU3R5bGVzKS5tYXAoTnVtYmVyKVxuICAgICAgICAgICl9YFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3hcbiAgICAgICAgaXM9XCJzcGFuXCJcbiAgICAgICAgey4uLihjb2xvciA/IHsgY29sb3I6IFRleHRDb2xvcnNbY29sb3JdIHx8IGNvbG9yIH0gOiB7fSl9XG4gICAgICAgIGZvbnRGYW1pbHk9e0ZvbnRGYW1pbGllc1tmb250RmFtaWx5XSB8fCBmb250RmFtaWx5fVxuICAgICAgICB7Li4udGV4dFN0eWxlfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuIl19