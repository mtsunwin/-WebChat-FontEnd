var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { Text } from '../../typography';
import { CheckboxAppearances } from '../../shared-styles';

var CheckIcon = function CheckIcon(_ref) {
  var _ref$fill = _ref.fill,
      fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,
      props = _objectWithoutProperties(_ref, ['fill']);

  return React.createElement(
    'svg',
    _extends({ width: 10, height: 7, viewBox: '0 0 10 7' }, props),
    React.createElement('path', {
      fill: fill,
      fillRule: 'evenodd',
      d: 'M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z'
    })
  );
};

CheckIcon.propTypes = {
  fill: PropTypes.string
};

var Checkbox = function (_PureComponent) {
  _inherits(Checkbox, _PureComponent);

  function Checkbox() {
    _classCallCheck(this, Checkbox);

    return _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).apply(this, arguments));
  }

  _createClass(Checkbox, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          name = _props.name,
          label = _props.label,
          appearance = _props.appearance,
          disabled = _props.disabled,
          isInvalid = _props.isInvalid,
          checked = _props.checked,
          onChange = _props.onChange,
          value = _props.value,
          props = _objectWithoutProperties(_props, ['id', 'name', 'label', 'appearance', 'disabled', 'isInvalid', 'checked', 'onChange', 'value']);

      var appearanceStyle = CheckboxAppearances[appearance];

      return React.createElement(
        Box,
        _extends({
          is: 'label',
          cursor: disabled ? 'not-allowed' : 'pointer',
          display: 'flex',
          marginY: 16
        }, props),
        React.createElement(Box, _extends({
          is: 'input',
          id: id,
          type: 'checkbox',
          name: name,
          value: value,
          checked: checked,
          onChange: onChange,
          disabled: disabled
        }, isInvalid ? { 'aria-invalid': true } : {}, {
          css: appearanceStyle
        })),
        React.createElement(
          Box,
          {
            boxSizing: 'border-box',
            borderRadius: 3,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: 16,
            height: 16
          },
          React.createElement(CheckIcon, null)
        ),
        label && React.createElement(
          Text,
          {
            marginLeft: 8,
            size: 300,
            color: disabled ? 'extraMuted' : 'default'
          },
          label
        )
      );
    }
  }]);

  return Checkbox;
}(PureComponent);

Checkbox.propTypes = _extends({}, Box.propTypes, {
  id: PropTypes.string,
  name: PropTypes.string,
  label: PropTypes.node,
  value: PropTypes.string,
  checked: PropTypes.bool,
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  isInvalid: PropTypes.bool,
  appearance: PropTypes.oneOf(Object.keys(CheckboxAppearances))
});
Checkbox.defaultProps = {
  appearance: 'default',
  onChange: function onChange() {}
};
export default Checkbox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jaGVja2JveC9zcmMvQ2hlY2tib3guanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiQm94IiwiVGV4dCIsIkNoZWNrYm94QXBwZWFyYW5jZXMiLCJDaGVja0ljb24iLCJmaWxsIiwicHJvcHMiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJDaGVja2JveCIsImlkIiwibmFtZSIsImxhYmVsIiwiYXBwZWFyYW5jZSIsImRpc2FibGVkIiwiaXNJbnZhbGlkIiwiY2hlY2tlZCIsIm9uQ2hhbmdlIiwidmFsdWUiLCJhcHBlYXJhbmNlU3R5bGUiLCJub2RlIiwiYm9vbCIsImZ1bmMiLCJvbmVPZiIsIk9iamVjdCIsImtleXMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEdBQVAsTUFBZ0IsUUFBaEI7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGtCQUFyQjtBQUNBLFNBQVNDLG1CQUFULFFBQW9DLHFCQUFwQzs7QUFFQSxJQUFNQyxZQUFZLFNBQVpBLFNBQVk7QUFBQSx1QkFBR0MsSUFBSDtBQUFBLE1BQUdBLElBQUgsNkJBQVUsY0FBVjtBQUFBLE1BQTZCQyxLQUE3Qjs7QUFBQSxTQUNoQjtBQUFBO0FBQUEsZUFBSyxPQUFPLEVBQVosRUFBZ0IsUUFBUSxDQUF4QixFQUEyQixTQUFRLFVBQW5DLElBQWtEQSxLQUFsRDtBQUNFO0FBQ0UsWUFBTUQsSUFEUjtBQUVFLGdCQUFTLFNBRlg7QUFHRSxTQUFFO0FBSEo7QUFERixHQURnQjtBQUFBLENBQWxCOztBQVVBRCxVQUFVRyxTQUFWLEdBQXNCO0FBQ3BCRixRQUFNTCxVQUFVUTtBQURJLENBQXRCOztJQUlxQkMsUTs7Ozs7Ozs7Ozs7NkJBbUJWO0FBQUEsbUJBWUgsS0FBS0gsS0FaRjtBQUFBLFVBRUxJLEVBRkssVUFFTEEsRUFGSztBQUFBLFVBR0xDLElBSEssVUFHTEEsSUFISztBQUFBLFVBSUxDLEtBSkssVUFJTEEsS0FKSztBQUFBLFVBS0xDLFVBTEssVUFLTEEsVUFMSztBQUFBLFVBTUxDLFFBTkssVUFNTEEsUUFOSztBQUFBLFVBT0xDLFNBUEssVUFPTEEsU0FQSztBQUFBLFVBUUxDLE9BUkssVUFRTEEsT0FSSztBQUFBLFVBU0xDLFFBVEssVUFTTEEsUUFUSztBQUFBLFVBVUxDLEtBVkssVUFVTEEsS0FWSztBQUFBLFVBV0ZaLEtBWEU7O0FBYVAsVUFBTWEsa0JBQWtCaEIsb0JBQW9CVSxVQUFwQixDQUF4Qjs7QUFFQSxhQUNFO0FBQUMsV0FBRDtBQUFBO0FBQ0UsY0FBRyxPQURMO0FBRUUsa0JBQVFDLFdBQVcsYUFBWCxHQUEyQixTQUZyQztBQUdFLG1CQUFRLE1BSFY7QUFJRSxtQkFBUztBQUpYLFdBS01SLEtBTE47QUFPRSw0QkFBQyxHQUFEO0FBQ0UsY0FBRyxPQURMO0FBRUUsY0FBSUksRUFGTjtBQUdFLGdCQUFLLFVBSFA7QUFJRSxnQkFBTUMsSUFKUjtBQUtFLGlCQUFPTyxLQUxUO0FBTUUsbUJBQVNGLE9BTlg7QUFPRSxvQkFBVUMsUUFQWjtBQVFFLG9CQUFVSDtBQVJaLFdBU09DLFlBQVksRUFBRSxnQkFBZ0IsSUFBbEIsRUFBWixHQUF1QyxFQVQ5QztBQVVFLGVBQUtJO0FBVlAsV0FQRjtBQW1CRTtBQUFDLGFBQUQ7QUFBQTtBQUNFLHVCQUFVLFlBRFo7QUFFRSwwQkFBYyxDQUZoQjtBQUdFLHFCQUFRLE1BSFY7QUFJRSx3QkFBVyxRQUpiO0FBS0UsNEJBQWUsUUFMakI7QUFNRSxtQkFBTyxFQU5UO0FBT0Usb0JBQVE7QUFQVjtBQVNFLDhCQUFDLFNBQUQ7QUFURixTQW5CRjtBQThCR1AsaUJBQ0M7QUFBQyxjQUFEO0FBQUE7QUFDRSx3QkFBWSxDQURkO0FBRUUsa0JBQU0sR0FGUjtBQUdFLG1CQUFPRSxXQUFXLFlBQVgsR0FBMEI7QUFIbkM7QUFLR0Y7QUFMSDtBQS9CSixPQURGO0FBMENEOzs7O0VBNUVtQ2IsYTs7QUFBakJVLFEsQ0FDWkYsUyxnQkFDRk4sSUFBSU0sUztBQUNQRyxNQUFJVixVQUFVUSxNO0FBQ2RHLFFBQU1YLFVBQVVRLE07QUFDaEJJLFNBQU9aLFVBQVVvQixJO0FBQ2pCRixTQUFPbEIsVUFBVVEsTTtBQUNqQlEsV0FBU2hCLFVBQVVxQixJO0FBQ25CSixZQUFVakIsVUFBVXNCLEk7QUFDcEJSLFlBQVVkLFVBQVVxQixJO0FBQ3BCTixhQUFXZixVQUFVcUIsSTtBQUNyQlIsY0FBWWIsVUFBVXVCLEtBQVYsQ0FBZ0JDLE9BQU9DLElBQVAsQ0FBWXRCLG1CQUFaLENBQWhCOztBQVhLTSxRLENBY1ppQixZLEdBQWU7QUFDcEJiLGNBQVksU0FEUTtBQUVwQkksWUFBVSxvQkFBTSxDQUFFO0FBRkUsQztlQWRIUixRIiwiZmlsZSI6IkNoZWNrYm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3ggZnJvbSAndWktYm94J1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgeyBDaGVja2JveEFwcGVhcmFuY2VzIH0gZnJvbSAnLi4vLi4vc2hhcmVkLXN0eWxlcydcblxuY29uc3QgQ2hlY2tJY29uID0gKHsgZmlsbCA9ICdjdXJyZW50Q29sb3InLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxzdmcgd2lkdGg9ezEwfSBoZWlnaHQ9ezd9IHZpZXdCb3g9XCIwIDAgMTAgN1wiIHsuLi5wcm9wc30+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9e2ZpbGx9XG4gICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgZD1cIk00IDQuNTg2TDEuNzA3IDIuMjkzQTEgMSAwIDEgMCAuMjkzIDMuNzA3bDMgM2EuOTk3Ljk5NyAwIDAgMCAxLjQxNCAwbDUtNUExIDEgMCAxIDAgOC4yOTMuMjkzTDQgNC41ODZ6XCJcbiAgICAvPlxuICA8L3N2Zz5cbilcblxuQ2hlY2tJY29uLnByb3BUeXBlcyA9IHtcbiAgZmlsbDogUHJvcFR5cGVzLnN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGVja2JveCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC4uLkJveC5wcm9wVHlwZXMsXG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ludmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGFwcGVhcmFuY2U6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhDaGVja2JveEFwcGVhcmFuY2VzKSlcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYXBwZWFyYW5jZTogJ2RlZmF1bHQnLFxuICAgIG9uQ2hhbmdlOiAoKSA9PiB7fVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIGxhYmVsLFxuICAgICAgYXBwZWFyYW5jZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgaXNJbnZhbGlkLFxuICAgICAgY2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgdmFsdWUsXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgYXBwZWFyYW5jZVN0eWxlID0gQ2hlY2tib3hBcHBlYXJhbmNlc1thcHBlYXJhbmNlXVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3hcbiAgICAgICAgaXM9XCJsYWJlbFwiXG4gICAgICAgIGN1cnNvcj17ZGlzYWJsZWQgPyAnbm90LWFsbG93ZWQnIDogJ3BvaW50ZXInfVxuICAgICAgICBkaXNwbGF5PVwiZmxleFwiXG4gICAgICAgIG1hcmdpblk9ezE2fVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBpcz1cImlucHV0XCJcbiAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgey4uLihpc0ludmFsaWQgPyB7ICdhcmlhLWludmFsaWQnOiB0cnVlIH0gOiB7fSl9XG4gICAgICAgICAgY3NzPXthcHBlYXJhbmNlU3R5bGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBib3hTaXppbmc9XCJib3JkZXItYm94XCJcbiAgICAgICAgICBib3JkZXJSYWRpdXM9ezN9XG4gICAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJcbiAgICAgICAgICB3aWR0aD17MTZ9XG4gICAgICAgICAgaGVpZ2h0PXsxNn1cbiAgICAgICAgPlxuICAgICAgICAgIDxDaGVja0ljb24gLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIHtsYWJlbCAmJiAoXG4gICAgICAgICAgPFRleHRcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ9ezh9XG4gICAgICAgICAgICBzaXplPXszMDB9XG4gICAgICAgICAgICBjb2xvcj17ZGlzYWJsZWQgPyAnZXh0cmFNdXRlZCcgOiAnZGVmYXVsdCd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvQm94PlxuICAgIClcbiAgfVxufVxuIl19