var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Text } from '../../typography';
import TableCell from './TableCell';

var ellipsis = {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
};

var TextTableCell = function (_PureComponent) {
  _inherits(TextTableCell, _PureComponent);

  function TextTableCell() {
    _classCallCheck(this, TextTableCell);

    return _possibleConstructorReturn(this, (TextTableCell.__proto__ || Object.getPrototypeOf(TextTableCell)).apply(this, arguments));
  }

  _createClass(TextTableCell, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          textProps = _props.textProps,
          isNumber = _props.isNumber,
          props = _objectWithoutProperties(_props, ['children', 'textProps', 'isNumber']);

      return React.createElement(
        TableCell,
        props,
        React.createElement(
          Text,
          _extends({
            size: 300,
            flex: '1'
          }, ellipsis, isNumber ? {
            textAlign: 'right',
            fontFamily: 'mono'
          } : {}, textProps),
          children
        )
      );
    }
  }]);

  return TextTableCell;
}(PureComponent);

TextTableCell.propTypes = _extends({}, TableCell.propTypes, {

  /**
   * Adds textAlign: right and fontFamily: mono.
   */
  isNumber: PropTypes.bool.isRequired,

  /**
   * Pass additional props to the Text component.
   */
  textProps: PropTypes.shape(Text.propTypes)
});
TextTableCell.defaultProps = {
  isNumber: false
};
export default TextTableCell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvVGV4dFRhYmxlQ2VsbC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJUZXh0IiwiVGFibGVDZWxsIiwiZWxsaXBzaXMiLCJvdmVyZmxvdyIsInRleHRPdmVyZmxvdyIsIndoaXRlU3BhY2UiLCJUZXh0VGFibGVDZWxsIiwicHJvcHMiLCJjaGlsZHJlbiIsInRleHRQcm9wcyIsImlzTnVtYmVyIiwidGV4dEFsaWduIiwiZm9udEZhbWlseSIsInByb3BUeXBlcyIsImJvb2wiLCJpc1JlcXVpcmVkIiwic2hhcGUiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsa0JBQXJCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0Qjs7QUFFQSxJQUFNQyxXQUFXO0FBQ2ZDLFlBQVUsUUFESztBQUVmQyxnQkFBYyxVQUZDO0FBR2ZDLGNBQVk7QUFIRyxDQUFqQjs7SUFNcUJDLGE7Ozs7Ozs7Ozs7OzZCQXNCVjtBQUFBLG1CQUM2QyxLQUFLQyxLQURsRDtBQUFBLFVBQ0NDLFFBREQsVUFDQ0EsUUFERDtBQUFBLFVBQ1dDLFNBRFgsVUFDV0EsU0FEWDtBQUFBLFVBQ3NCQyxRQUR0QixVQUNzQkEsUUFEdEI7QUFBQSxVQUNtQ0gsS0FEbkM7O0FBRVAsYUFDRTtBQUFDLGlCQUFEO0FBQWVBLGFBQWY7QUFDRTtBQUFDLGNBQUQ7QUFBQTtBQUNFLGtCQUFNLEdBRFI7QUFFRSxrQkFBSztBQUZQLGFBR01MLFFBSE4sRUFJT1EsV0FDRDtBQUNFQyx1QkFBVyxPQURiO0FBRUVDLHdCQUFZO0FBRmQsV0FEQyxHQUtELEVBVE4sRUFVTUgsU0FWTjtBQVlHRDtBQVpIO0FBREYsT0FERjtBQWtCRDs7OztFQTFDd0NWLGE7O0FBQXRCUSxhLENBQ1pPLFMsZ0JBSUZaLFVBQVVZLFM7O0FBRWI7OztBQUdBSCxZQUFVWCxVQUFVZSxJQUFWLENBQWVDLFU7O0FBRXpCOzs7QUFHQU4sYUFBV1YsVUFBVWlCLEtBQVYsQ0FBZ0JoQixLQUFLYSxTQUFyQjs7QUFmTVAsYSxDQWtCWlcsWSxHQUFlO0FBQ3BCUCxZQUFVO0FBRFUsQztlQWxCSEosYSIsImZpbGUiOiJUZXh0VGFibGVDZWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90eXBvZ3JhcGh5J1xuaW1wb3J0IFRhYmxlQ2VsbCBmcm9tICcuL1RhYmxlQ2VsbCdcblxuY29uc3QgZWxsaXBzaXMgPSB7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0VGFibGVDZWxsIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogQ29tcG9zZXMgdGhlIFRhYmxlQ2VsbCBjb21wb25lbnQgYXMgdGhlIGJhc2UuXG4gICAgICovXG4gICAgLi4uVGFibGVDZWxsLnByb3BUeXBlcyxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGV4dEFsaWduOiByaWdodCBhbmQgZm9udEZhbWlseTogbW9uby5cbiAgICAgKi9cbiAgICBpc051bWJlcjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFBhc3MgYWRkaXRpb25hbCBwcm9wcyB0byB0aGUgVGV4dCBjb21wb25lbnQuXG4gICAgICovXG4gICAgdGV4dFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoVGV4dC5wcm9wVHlwZXMpXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGlzTnVtYmVyOiBmYWxzZVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIHRleHRQcm9wcywgaXNOdW1iZXIsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxUYWJsZUNlbGwgey4uLnByb3BzfT5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBzaXplPXszMDB9XG4gICAgICAgICAgZmxleD1cIjFcIlxuICAgICAgICAgIHsuLi5lbGxpcHNpc31cbiAgICAgICAgICB7Li4uKGlzTnVtYmVyXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogJ21vbm8nXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge30pfVxuICAgICAgICAgIHsuLi50ZXh0UHJvcHN9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvVGFibGVDZWxsPlxuICAgIClcbiAgfVxufVxuIl19