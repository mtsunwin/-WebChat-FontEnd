var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/jsx-handler-names */
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import ScrollbarSize from './ScrollbarSize';

var TableHead = function (_PureComponent) {
  _inherits(TableHead, _PureComponent);

  function TableHead() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TableHead);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableHead.__proto__ || Object.getPrototypeOf(TableHead)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      scrollbarWidth: 0
    }, _this.handleScrollbarSize = function (width) {
      _this.setState({
        scrollbarWidth: width
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TableHead, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          accountForScrollbar = _props.accountForScrollbar,
          props = _objectWithoutProperties(_props, ['children', 'accountForScrollbar']);

      var scrollbarWidth = this.state.scrollbarWidth;


      return React.createElement(
        Pane,
        _extends({ paddingRight: scrollbarWidth }, props),
        children,
        ' ',
        accountForScrollbar && React.createElement(ScrollbarSize, { handleScrollbarSize: this.handleScrollbarSize })
      );
    }
  }]);

  return TableHead;
}(PureComponent);

TableHead.propTypes = _extends({}, Pane.propTypes, {

  /**
   * This should always be true if you are using TableHead together with a TableBody.
   * Because TableBody has `overflowY: scroll` by default.
   */
  accountForScrollbar: PropTypes.bool
});
TableHead.defaultProps = {
  accountForScrollbar: true,
  boxSizing: 'border-box',
  display: 'flex',
  appearance: 'tint2',
  borderBottom: 'extraMuted'
};
export default TableHead;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvVGFibGVIZWFkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlBhbmUiLCJTY3JvbGxiYXJTaXplIiwiVGFibGVIZWFkIiwic3RhdGUiLCJzY3JvbGxiYXJXaWR0aCIsImhhbmRsZVNjcm9sbGJhclNpemUiLCJzZXRTdGF0ZSIsIndpZHRoIiwicHJvcHMiLCJjaGlsZHJlbiIsImFjY291bnRGb3JTY3JvbGxiYXIiLCJwcm9wVHlwZXMiLCJib29sIiwiZGVmYXVsdFByb3BzIiwiYm94U2l6aW5nIiwiZGlzcGxheSIsImFwcGVhcmFuY2UiLCJib3JkZXJCb3R0b20iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0EsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixjQUFyQjtBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCOztJQUVxQkMsUzs7Ozs7Ozs7Ozs7Ozs7NExBY25CQyxLLEdBQVE7QUFDTkMsc0JBQWdCO0FBRFYsSyxRQVlSQyxtQixHQUFzQixpQkFBUztBQUM3QixZQUFLQyxRQUFMLENBQWM7QUFDWkYsd0JBQWdCRztBQURKLE9BQWQ7QUFHRCxLOzs7Ozs2QkFFUTtBQUFBLG1CQUM2QyxLQUFLQyxLQURsRDtBQUFBLFVBQ0NDLFFBREQsVUFDQ0EsUUFERDtBQUFBLFVBQ1dDLG1CQURYLFVBQ1dBLG1CQURYO0FBQUEsVUFDbUNGLEtBRG5DOztBQUFBLFVBRUNKLGNBRkQsR0FFb0IsS0FBS0QsS0FGekIsQ0FFQ0MsY0FGRDs7O0FBSVAsYUFDRTtBQUFDLFlBQUQ7QUFBQSxtQkFBTSxjQUFjQSxjQUFwQixJQUF3Q0ksS0FBeEM7QUFDR0MsZ0JBREg7QUFDYSxXQURiO0FBRUdDLCtCQUNDLG9CQUFDLGFBQUQsSUFBZSxxQkFBcUIsS0FBS0wsbUJBQXpDO0FBSEosT0FERjtBQVFEOzs7O0VBNUNvQ1AsYTs7QUFBbEJJLFMsQ0FDWlMsUyxnQkFJRlgsS0FBS1csUzs7QUFFUjs7OztBQUlBRCx1QkFBcUJYLFVBQVVhOztBQVhkVixTLENBa0JaVyxZLEdBQWU7QUFDcEJILHVCQUFxQixJQUREO0FBRXBCSSxhQUFXLFlBRlM7QUFHcEJDLFdBQVMsTUFIVztBQUlwQkMsY0FBWSxPQUpRO0FBS3BCQyxnQkFBYztBQUxNLEM7ZUFsQkhmLFMiLCJmaWxlIjoiVGFibGVIZWFkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcmVhY3QvanN4LWhhbmRsZXItbmFtZXMgKi9cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vLi4vbGF5ZXJzJ1xuaW1wb3J0IFNjcm9sbGJhclNpemUgZnJvbSAnLi9TY3JvbGxiYXJTaXplJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZUhlYWQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyB0aGUgUGFuZSBjb21wb25lbnQgYXMgdGhlIGJhc2UuXG4gICAgICovXG4gICAgLi4uUGFuZS5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIHNob3VsZCBhbHdheXMgYmUgdHJ1ZSBpZiB5b3UgYXJlIHVzaW5nIFRhYmxlSGVhZCB0b2dldGhlciB3aXRoIGEgVGFibGVCb2R5LlxuICAgICAqIEJlY2F1c2UgVGFibGVCb2R5IGhhcyBgb3ZlcmZsb3dZOiBzY3JvbGxgIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgYWNjb3VudEZvclNjcm9sbGJhcjogUHJvcFR5cGVzLmJvb2xcbiAgfVxuXG4gIHN0YXRlID0ge1xuICAgIHNjcm9sbGJhcldpZHRoOiAwXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFjY291bnRGb3JTY3JvbGxiYXI6IHRydWUsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFwcGVhcmFuY2U6ICd0aW50MicsXG4gICAgYm9yZGVyQm90dG9tOiAnZXh0cmFNdXRlZCdcbiAgfVxuXG4gIGhhbmRsZVNjcm9sbGJhclNpemUgPSB3aWR0aCA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzY3JvbGxiYXJXaWR0aDogd2lkdGhcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGFjY291bnRGb3JTY3JvbGxiYXIsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBzY3JvbGxiYXJXaWR0aCB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lIHBhZGRpbmdSaWdodD17c2Nyb2xsYmFyV2lkdGh9IHsuLi5wcm9wc30+XG4gICAgICAgIHtjaGlsZHJlbn17JyAnfVxuICAgICAgICB7YWNjb3VudEZvclNjcm9sbGJhciAmJiAoXG4gICAgICAgICAgPFNjcm9sbGJhclNpemUgaGFuZGxlU2Nyb2xsYmFyU2l6ZT17dGhpcy5oYW5kbGVTY3JvbGxiYXJTaXplfSAvPlxuICAgICAgICApfVxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfVxufVxuIl19