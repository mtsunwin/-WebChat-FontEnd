'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uiBox = require('ui-box');

var _Transition = require('react-transition-group/Transition');

var _Transition2 = _interopRequireDefault(_Transition);

var _layers = require('../../layers');

var _portal = require('../../portal');

var _typography = require('../../typography');

var _buttons = require('../../buttons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var animationEasing = {
  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)',
  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'
};

var ANIMATION_DURATION = 240;

var openAnimation = _uiBox.css.keyframes('openAnimation', {
  from: {
    transform: 'translateY(100%)'
  },
  to: {
    transform: 'translateY(0)'
  }
});

var closeAnimation = _uiBox.css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.9)',
    opacity: 0
  }
});

var animationStyles = {
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: openAnimation + ' ' + ANIMATION_DURATION + 'ms ' + animationEasing.spring + ' both'
  },
  '&[data-state="exiting"]': {
    animation: closeAnimation + ' 120ms ' + animationEasing.acceleration + ' both'
  }
};

var CornerDialog = function (_PureComponent) {
  _inherits(CornerDialog, _PureComponent);

  function CornerDialog(props) {
    _classCallCheck(this, CornerDialog);

    var _this = _possibleConstructorReturn(this, (CornerDialog.__proto__ || Object.getPrototypeOf(CornerDialog)).call(this, props));

    _this.handleExited = function () {
      _this.setState({ exiting: false, exited: true });
      _this.props.onCloseComplete();
    };

    _this.handleClose = function () {
      _this.setState({ exiting: true });
    };

    _this.handleConfirm = function () {
      _this.props.onConfirm(_this.handleClose);
    };

    _this.renderChildren = function () {
      var children = _this.props.children;

      if (typeof children === 'function') {
        return children({ close: _this.handleClose });
      } else if (typeof children === 'string') {
        return _react2.default.createElement(
          _typography.Paragraph,
          { size: 400, color: 'muted' },
          children
        );
      }
      return children;
    };

    _this.state = {
      exiting: false,
      exited: !props.isShown
    };
    return _this;
  }

  _createClass(CornerDialog, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.isShown && !this.props.isShown) {
        this.setState({
          exited: false
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          width = _props.width,
          isShown = _props.isShown,
          hasFooter = _props.hasFooter,
          hasCancel = _props.hasCancel,
          cancelLabel = _props.cancelLabel,
          confirmLabel = _props.confirmLabel,
          onOpenComplete = _props.onOpenComplete,
          containerProps = _props.containerProps;
      var _state = this.state,
          exiting = _state.exiting,
          exited = _state.exited;


      if (exited) return null;

      return _react2.default.createElement(
        _portal.Portal,
        null,
        _react2.default.createElement(
          _Transition2.default,
          {
            appear: true,
            unmountOnExit: true,
            timeout: ANIMATION_DURATION,
            'in': isShown && !exiting,
            onExited: this.handleExited,
            onEntered: onOpenComplete
          },
          function (state) {
            return _react2.default.createElement(
              _layers.Card,
              _extends({
                role: 'dialog',
                backgroundColor: 'white',
                elevation: 4,
                width: width,
                css: animationStyles,
                'data-state': state,
                position: 'fixed',
                bottom: 16,
                right: 16,
                padding: 32
              }, containerProps),
              _react2.default.createElement(
                _layers.Pane,
                { display: 'flex', alignItems: 'center', marginBottom: 12 },
                _react2.default.createElement(
                  _typography.Heading,
                  { is: 'h4', size: 600, flex: '1' },
                  title
                ),
                _react2.default.createElement(_buttons.IconButton, {
                  height: 32,
                  icon: 'close',
                  appearance: 'ghost',
                  onClick: _this2.handleClose
                })
              ),
              _react2.default.createElement(
                _layers.Pane,
                { overflowY: 'auto', 'data-state': state },
                _this2.renderChildren()
              ),
              hasFooter && _react2.default.createElement(
                _layers.Pane,
                {
                  marginTop: 24,
                  flexShrink: 0,
                  display: 'flex',
                  flexDirection: 'row-reverse'
                },
                _react2.default.createElement(
                  _buttons.Button,
                  {
                    appearance: 'green',
                    marginLeft: 8,
                    onClick: _this2.handleConfirm
                  },
                  confirmLabel
                ),
                hasCancel && _react2.default.createElement(
                  _buttons.Button,
                  { onClick: _this2.handleClose },
                  cancelLabel
                )
              )
            );
          }
        )
      );
    }
  }]);

  return CornerDialog;
}(_react.PureComponent);

CornerDialog.propTypes = {
  /**
   * Children can be a string, node or a function accepting `({ close })`.
   * When passing a string, <Paragraph size={400} color="muted" /> is used to wrap the string.
   */
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]).isRequired,

  /**
   * When true, the dialog is shown.
   */
  isShown: _propTypes2.default.bool,

  /**
   * Title of the Dialog. Titles should use Title Case.
   */
  title: _propTypes2.default.node,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: _propTypes2.default.func,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: _propTypes2.default.func,

  /**
   * When true, the footer with the cancel and confirm button is shown.
   */
  hasFooter: _propTypes2.default.bool,

  /**
   * Function that will be called when the confirm button is clicked.
   * This does not close the Dialog. A close function will be passed
   * as a paramater you can use to close the dialog.
   *
   * `onConfirm={(close) => close()}`
   */
  onConfirm: _propTypes2.default.func,

  /**
   * Label of the confirm button.
   */
  confirmLabel: _propTypes2.default.string,

  /**
   * When true, the cancel button is shown.
   */
  hasCancel: _propTypes2.default.bool,

  /**
   * Function that will be called when the cancel button is clicked.
   * This closes the Dialog by default.
   *
   * `onCancel={(close) => close()}`
   */
  onCancel: _propTypes2.default.func,

  /**
   * Label of the cancel button.
   */
  cancelLabel: _propTypes2.default.string,

  /**
   * Width of the Dialog.
   */
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

  /**
   * Props that are passed to the dialog container.
   */
  containerProps: _propTypes2.default.object
};
CornerDialog.defaultProps = {
  width: 392,
  hasFooter: true,
  confirmLabel: 'Learn More',
  hasCancel: true,
  cancelLabel: 'Close',
  onCancel: function onCancel(close) {
    return close();
  },
  onConfirm: function onConfirm(close) {
    return close();
  }
};
exports.default = CornerDialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,