'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _colors = require('../../../colors');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var disabledState = '&[disabled] + div';
var hoverState = '&:not([disabled]):hover + div';
var focusState = '&:not([disabled]):focus + div';
var activeState = '&:not([disabled]):active + div';
var checkedState = '&:checked + div';
var checkedActiveState = '&:not([disabled]):checked:active + div';
var checkedDisabledState = '&[disabled]:checked + div';

var hiddenCheckboxStyle = {
  border: '0',
  clip: 'rect(1px, 1px, 1px, 1px)',
  height: '1',
  overflow: 'hidden',
  padding: '0',
  position: 'absolute',
  whiteSpace: 'nowrap',
  width: '1',
  opacity: '0'
};

var SwitchAppearances = {
  default: _extends({}, hiddenCheckboxStyle, (_extends2 = {
    '& + div > svg': {
      display: 'none'
    },
    '& + div': {
      transition: 'all 200ms ease-in-out',
      cursor: 'pointer',
      color: 'white',
      boxSizing: 'border-box',
      backgroundColor: _colors.colors.neutral['100A'],
      borderRadius: 9999,
      boxShadow: 'inset 0 0 0 1px ' + _colors.colors.neutral['20A'] + ', inset 0 -1px 1px 0 ' + _colors.colors.neutral['10A']
    }
  }, _defineProperty(_extends2, disabledState, {
    cursor: 'not-allowed',
    boxShadow: 'inset 0 0 0 1px ' + _colors.colors.neutral['20A'],
    backgroundColor: _colors.colors.neutral['30A'],
    backgroundImage: 'none'
  }), _defineProperty(_extends2, hoverState, {
    backgroundImage: 'linear-gradient(to top, ' + _colors.colors.neutral['7A'] + ', ' + _colors.colors.neutral['3A'] + ' )',
    boxShadow: 'inset 0 0 0 1px ' + _colors.colors.neutral['40A'] + ', inset 0 -1px 1px 0 ' + _colors.colors.neutral['15A']
  }), _defineProperty(_extends2, focusState, {
    boxShadow: '0 0 0 3px ' + _colors.colors.blue['20A'] + ', inset 0 0 0 1px ' + _colors.colors.neutral['70A'] + ', inset 0 -1px 1px 0 ' + _colors.colors.neutral['10A']
  }), _defineProperty(_extends2, activeState, {
    backgroundImage: 'none',
    backgroundColor: _colors.colors.neutral['200A']
    // BoxShadow: `inset 0 0 0 1px ${colors.blue['80A']}`,
  }), _defineProperty(_extends2, checkedState, {
    backgroundColor: _colors.colors.blue['500'],
    color: 'white',
    backgroundImage: 'linear-gradient(to top, ' + _colors.colors.blue['500'] + ', ' + _colors.colors.blue['600'] + ')',
    boxShadow: 'inset 0 0 0 1px ' + _colors.colors.neutral['30A'] + ', inset 0 -1px 1px 0 ' + _colors.colors.neutral['30A'],
    '& > svg': {
      display: 'block'
    }
  }), _defineProperty(_extends2, checkedDisabledState, {
    color: 'white',
    backgroundColor: 'white',
    backgroundImage: 'linear-gradient(to top, ' + _colors.colors.neutral['300'] + ', ' + _colors.colors.neutral['400'] + ')',
    boxShadow: 'inset 0 0 0 1px ' + _colors.colors.neutral['20A'] + ', inset 0 -1px 1px 0 ' + _colors.colors.neutral['10A'],
    '& > svg': {
      display: 'block'
    }
  }), _defineProperty(_extends2, checkedActiveState, {
    backgroundColor: _colors.colors.blue['500'],
    color: 'white',
    backgroundImage: 'linear-gradient(to top, ' + _colors.colors.blue['800'] + ', ' + _colors.colors.blue['900'] + ')',
    boxShadow: 'inset 0 0 0 1px ' + _colors.colors.neutral['30A'] + ', inset 0 -1px 1px 0 ' + _colors.colors.neutral['30A'],
    '& > svg': {
      display: 'block'
    }
  }), _extends2))
};

exports.default = SwitchAppearances;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zd2l0Y2gvc3JjL3N0eWxlcy9Td2l0Y2hBcHBlYXJhbmNlcy5qcyJdLCJuYW1lcyI6WyJkaXNhYmxlZFN0YXRlIiwiaG92ZXJTdGF0ZSIsImZvY3VzU3RhdGUiLCJhY3RpdmVTdGF0ZSIsImNoZWNrZWRTdGF0ZSIsImNoZWNrZWRBY3RpdmVTdGF0ZSIsImNoZWNrZWREaXNhYmxlZFN0YXRlIiwiaGlkZGVuQ2hlY2tib3hTdHlsZSIsImJvcmRlciIsImNsaXAiLCJoZWlnaHQiLCJvdmVyZmxvdyIsInBhZGRpbmciLCJwb3NpdGlvbiIsIndoaXRlU3BhY2UiLCJ3aWR0aCIsIm9wYWNpdHkiLCJTd2l0Y2hBcHBlYXJhbmNlcyIsImRlZmF1bHQiLCJkaXNwbGF5IiwidHJhbnNpdGlvbiIsImN1cnNvciIsImNvbG9yIiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwibmV1dHJhbCIsImJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsImJhY2tncm91bmRJbWFnZSIsImJsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLGdCQUFnQixtQkFBdEI7QUFDQSxJQUFNQyxhQUFhLCtCQUFuQjtBQUNBLElBQU1DLGFBQWEsK0JBQW5CO0FBQ0EsSUFBTUMsY0FBYyxnQ0FBcEI7QUFDQSxJQUFNQyxlQUFlLGlCQUFyQjtBQUNBLElBQU1DLHFCQUFxQix3Q0FBM0I7QUFDQSxJQUFNQyx1QkFBdUIsMkJBQTdCOztBQUVBLElBQU1DLHNCQUFzQjtBQUMxQkMsVUFBUSxHQURrQjtBQUUxQkMsUUFBTSwwQkFGb0I7QUFHMUJDLFVBQVEsR0FIa0I7QUFJMUJDLFlBQVUsUUFKZ0I7QUFLMUJDLFdBQVMsR0FMaUI7QUFNMUJDLFlBQVUsVUFOZ0I7QUFPMUJDLGNBQVksUUFQYztBQVExQkMsU0FBTyxHQVJtQjtBQVMxQkMsV0FBUztBQVRpQixDQUE1Qjs7QUFZQSxJQUFNQyxvQkFBb0I7QUFDeEJDLHdCQUNLWCxtQkFETDtBQUVFLHFCQUFpQjtBQUNmWSxlQUFTO0FBRE0sS0FGbkI7QUFLRSxlQUFXO0FBQ1RDLGtCQUFZLHVCQURIO0FBRVRDLGNBQVEsU0FGQztBQUdUQyxhQUFPLE9BSEU7QUFJVEMsaUJBQVcsWUFKRjtBQUtUQyx1QkFBaUIsZUFBT0MsT0FBUCxDQUFlLE1BQWYsQ0FMUjtBQU1UQyxvQkFBYyxJQU5MO0FBT1RDLHNDQUNFLGVBQU9GLE9BQVAsQ0FBZSxLQUFmLENBREYsNkJBRXdCLGVBQU9BLE9BQVAsQ0FBZSxLQUFmO0FBVGY7QUFMYixnQ0FnQkd6QixhQWhCSCxFQWdCbUI7QUFDZnFCLFlBQVEsYUFETztBQUVmTSxvQ0FBOEIsZUFBT0YsT0FBUCxDQUFlLEtBQWYsQ0FGZjtBQUdmRCxxQkFBaUIsZUFBT0MsT0FBUCxDQUFlLEtBQWYsQ0FIRjtBQUlmRyxxQkFBaUI7QUFKRixHQWhCbkIsOEJBc0JHM0IsVUF0QkgsRUFzQmdCO0FBQ1oyQixrREFBNEMsZUFBT0gsT0FBUCxDQUFlLElBQWYsQ0FBNUMsVUFDRSxlQUFPQSxPQUFQLENBQWUsSUFBZixDQURGLE9BRFk7QUFJWkUsb0NBQ0UsZUFBT0YsT0FBUCxDQUFlLEtBQWYsQ0FERiw2QkFFd0IsZUFBT0EsT0FBUCxDQUFlLEtBQWY7QUFOWixHQXRCaEIsOEJBOEJHdkIsVUE5QkgsRUE4QmdCO0FBQ1p5Qiw4QkFBd0IsZUFBT0UsSUFBUCxDQUFZLEtBQVosQ0FBeEIsMEJBQ0UsZUFBT0osT0FBUCxDQUFlLEtBQWYsQ0FERiw2QkFFd0IsZUFBT0EsT0FBUCxDQUFlLEtBQWY7QUFIWixHQTlCaEIsOEJBbUNHdEIsV0FuQ0gsRUFtQ2lCO0FBQ2J5QixxQkFBaUIsTUFESjtBQUViSixxQkFBaUIsZUFBT0MsT0FBUCxDQUFlLE1BQWY7QUFDakI7QUFIYSxHQW5DakIsOEJBd0NHckIsWUF4Q0gsRUF3Q2tCO0FBQ2RvQixxQkFBaUIsZUFBT0ssSUFBUCxDQUFZLEtBQVosQ0FESDtBQUVkUCxXQUFPLE9BRk87QUFHZE0sa0RBQTRDLGVBQU9DLElBQVAsQ0FBWSxLQUFaLENBQTVDLFVBQ0UsZUFBT0EsSUFBUCxDQUFZLEtBQVosQ0FERixNQUhjO0FBTWRGLG9DQUNFLGVBQU9GLE9BQVAsQ0FBZSxLQUFmLENBREYsNkJBRXdCLGVBQU9BLE9BQVAsQ0FBZSxLQUFmLENBUlY7QUFTZCxlQUFXO0FBQ1ROLGVBQVM7QUFEQTtBQVRHLEdBeENsQiw4QkFxREdiLG9CQXJESCxFQXFEMEI7QUFDdEJnQixXQUFPLE9BRGU7QUFFdEJFLHFCQUFpQixPQUZLO0FBR3RCSSxrREFBNEMsZUFBT0gsT0FBUCxDQUFlLEtBQWYsQ0FBNUMsVUFDRSxlQUFPQSxPQUFQLENBQWUsS0FBZixDQURGLE1BSHNCO0FBTXRCRSxvQ0FDRSxlQUFPRixPQUFQLENBQWUsS0FBZixDQURGLDZCQUV3QixlQUFPQSxPQUFQLENBQWUsS0FBZixDQVJGO0FBU3RCLGVBQVc7QUFDVE4sZUFBUztBQURBO0FBVFcsR0FyRDFCLDhCQWtFR2Qsa0JBbEVILEVBa0V3QjtBQUNwQm1CLHFCQUFpQixlQUFPSyxJQUFQLENBQVksS0FBWixDQURHO0FBRXBCUCxXQUFPLE9BRmE7QUFHcEJNLGtEQUE0QyxlQUFPQyxJQUFQLENBQVksS0FBWixDQUE1QyxVQUNFLGVBQU9BLElBQVAsQ0FBWSxLQUFaLENBREYsTUFIb0I7QUFNcEJGLG9DQUNFLGVBQU9GLE9BQVAsQ0FBZSxLQUFmLENBREYsNkJBRXdCLGVBQU9BLE9BQVAsQ0FBZSxLQUFmLENBUko7QUFTcEIsZUFBVztBQUNUTixlQUFTO0FBREE7QUFUUyxHQWxFeEI7QUFEd0IsQ0FBMUI7O2tCQW1GZUYsaUIiLCJmaWxlIjoiU3dpdGNoQXBwZWFyYW5jZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuLi8uLi8uLi9jb2xvcnMnXG5cbmNvbnN0IGRpc2FibGVkU3RhdGUgPSAnJltkaXNhYmxlZF0gKyBkaXYnXG5jb25zdCBob3ZlclN0YXRlID0gJyY6bm90KFtkaXNhYmxlZF0pOmhvdmVyICsgZGl2J1xuY29uc3QgZm9jdXNTdGF0ZSA9ICcmOm5vdChbZGlzYWJsZWRdKTpmb2N1cyArIGRpdidcbmNvbnN0IGFjdGl2ZVN0YXRlID0gJyY6bm90KFtkaXNhYmxlZF0pOmFjdGl2ZSArIGRpdidcbmNvbnN0IGNoZWNrZWRTdGF0ZSA9ICcmOmNoZWNrZWQgKyBkaXYnXG5jb25zdCBjaGVja2VkQWN0aXZlU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkXSk6Y2hlY2tlZDphY3RpdmUgKyBkaXYnXG5jb25zdCBjaGVja2VkRGlzYWJsZWRTdGF0ZSA9ICcmW2Rpc2FibGVkXTpjaGVja2VkICsgZGl2J1xuXG5jb25zdCBoaWRkZW5DaGVja2JveFN0eWxlID0ge1xuICBib3JkZXI6ICcwJyxcbiAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gIGhlaWdodDogJzEnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6ICcwJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB3aWR0aDogJzEnLFxuICBvcGFjaXR5OiAnMCdcbn1cblxuY29uc3QgU3dpdGNoQXBwZWFyYW5jZXMgPSB7XG4gIGRlZmF1bHQ6IHtcbiAgICAuLi5oaWRkZW5DaGVja2JveFN0eWxlLFxuICAgICcmICsgZGl2ID4gc3ZnJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICAnJiArIGRpdic6IHtcbiAgICAgIHRyYW5zaXRpb246ICdhbGwgMjAwbXMgZWFzZS1pbi1vdXQnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMubmV1dHJhbFsnMTAwQSddLFxuICAgICAgYm9yZGVyUmFkaXVzOiA5OTk5LFxuICAgICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7XG4gICAgICAgIGNvbG9ycy5uZXV0cmFsWycyMEEnXVxuICAgICAgfSwgaW5zZXQgMCAtMXB4IDFweCAwICR7Y29sb3JzLm5ldXRyYWxbJzEwQSddfWBcbiAgICB9LFxuICAgIFtkaXNhYmxlZFN0YXRlXToge1xuICAgICAgY3Vyc29yOiAnbm90LWFsbG93ZWQnLFxuICAgICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7Y29sb3JzLm5ldXRyYWxbJzIwQSddfWAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5uZXV0cmFsWyczMEEnXSxcbiAgICAgIGJhY2tncm91bmRJbWFnZTogJ25vbmUnXG4gICAgfSxcbiAgICBbaG92ZXJTdGF0ZV06IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCh0byB0b3AsICR7Y29sb3JzLm5ldXRyYWxbJzdBJ119LCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnM0EnXVxuICAgICAgfSApYCxcbiAgICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnNDBBJ11cbiAgICAgIH0sIGluc2V0IDAgLTFweCAxcHggMCAke2NvbG9ycy5uZXV0cmFsWycxNUEnXX1gXG4gICAgfSxcbiAgICBbZm9jdXNTdGF0ZV06IHtcbiAgICAgIGJveFNoYWRvdzogYDAgMCAwIDNweCAke2NvbG9ycy5ibHVlWycyMEEnXX0sIGluc2V0IDAgMCAwIDFweCAke1xuICAgICAgICBjb2xvcnMubmV1dHJhbFsnNzBBJ11cbiAgICAgIH0sIGluc2V0IDAgLTFweCAxcHggMCAke2NvbG9ycy5uZXV0cmFsWycxMEEnXX1gXG4gICAgfSxcbiAgICBbYWN0aXZlU3RhdGVdOiB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLm5ldXRyYWxbJzIwMEEnXVxuICAgICAgLy8gQm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7Y29sb3JzLmJsdWVbJzgwQSddfWAsXG4gICAgfSxcbiAgICBbY2hlY2tlZFN0YXRlXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuYmx1ZVsnNTAwJ10sXG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCh0byB0b3AsICR7Y29sb3JzLmJsdWVbJzUwMCddfSwgJHtcbiAgICAgICAgY29sb3JzLmJsdWVbJzYwMCddXG4gICAgICB9KWAsXG4gICAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzMwQSddXG4gICAgICB9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtjb2xvcnMubmV1dHJhbFsnMzBBJ119YCxcbiAgICAgICcmID4gc3ZnJzoge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfSxcbiAgICBbY2hlY2tlZERpc2FibGVkU3RhdGVdOiB7XG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCh0byB0b3AsICR7Y29sb3JzLm5ldXRyYWxbJzMwMCddfSwgJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzQwMCddXG4gICAgICB9KWAsXG4gICAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzIwQSddXG4gICAgICB9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtjb2xvcnMubmV1dHJhbFsnMTBBJ119YCxcbiAgICAgICcmID4gc3ZnJzoge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfSxcbiAgICBbY2hlY2tlZEFjdGl2ZVN0YXRlXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuYmx1ZVsnNTAwJ10sXG4gICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCh0byB0b3AsICR7Y29sb3JzLmJsdWVbJzgwMCddfSwgJHtcbiAgICAgICAgY29sb3JzLmJsdWVbJzkwMCddXG4gICAgICB9KWAsXG4gICAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgICAgY29sb3JzLm5ldXRyYWxbJzMwQSddXG4gICAgICB9LCBpbnNldCAwIC0xcHggMXB4IDAgJHtjb2xvcnMubmV1dHJhbFsnMzBBJ119YCxcbiAgICAgICcmID4gc3ZnJzoge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaEFwcGVhcmFuY2VzXG4iXX0=