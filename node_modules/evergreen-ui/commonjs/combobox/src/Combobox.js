'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uiBox = require('ui-box');

var _uiBox2 = _interopRequireDefault(_uiBox);

var _autocomplete = require('../../autocomplete');

var _textInput = require('../../text-input');

var _buttons = require('../../buttons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Combobox = function (_PureComponent) {
  _inherits(Combobox, _PureComponent);

  function Combobox(props, context) {
    _classCallCheck(this, Combobox);

    var _this = _possibleConstructorReturn(this, (Combobox.__proto__ || Object.getPrototypeOf(Combobox)).call(this, props, context));

    _this.handleStateChange = function (changes) {
      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {
        if (!changes.isOpen) {
          _this.setState({ isOpenedByButton: false });
        }
      }
    };

    _this.state = {
      isOpenedByButton: false
    };
    return _this;
  }

  _createClass(Combobox, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          selectedItem = _props.selectedItem,
          defaultSelectedItem = _props.defaultSelectedItem,
          itemToString = _props.itemToString,
          width = _props.width,
          appearance = _props.appearance,
          height = _props.height,
          onChange = _props.onChange,
          placeholder = _props.placeholder,
          inputProps = _props.inputProps,
          buttonProps = _props.buttonProps,
          openOnFocus = _props.openOnFocus,
          autocompleteProps = _props.autocompleteProps,
          props = _objectWithoutProperties(_props, ['items', 'selectedItem', 'defaultSelectedItem', 'itemToString', 'width', 'appearance', 'height', 'onChange', 'placeholder', 'inputProps', 'buttonProps', 'openOnFocus', 'autocompleteProps']);

      return _react2.default.createElement(
        _autocomplete.Autocomplete,
        _extends({
          items: items,
          selectedItem: selectedItem,
          defaultSelectedItem: defaultSelectedItem,
          itemToString: itemToString,
          onChange: onChange,
          onStateChange: this.handleStateChange,
          isFilterDisabled: this.state.isOpenedByButton
        }, autocompleteProps),
        function (_ref) {
          var getRef = _ref.getRef,
              isShown = _ref.isShown,
              openMenu = _ref.openMenu,
              inputValue = _ref.inputValue,
              getInputProps = _ref.getInputProps,
              getButtonProps = _ref.getButtonProps,
              clearSelection = _ref.clearSelection;
          return _react2.default.createElement(
            _uiBox2.default,
            _extends({
              innerRef: function innerRef(ref) {
                return getRef(ref);
              },
              display: 'inline-flex',
              width: width
            }, props),
            _react2.default.createElement(_textInput.TextInput, _extends({
              width: 0,
              flex: 1,
              height: height,
              value: inputValue,
              borderTopRightRadius: 0,
              borderBottomRightRadius: 0
            }, getInputProps(_extends({}, inputProps, {
              placeholder: placeholder,
              onFocus: function onFocus() {
                if (openOnFocus) openMenu();
              },
              onChange: function onChange(e) {
                if (_this2.state.isOpenedByButton) {
                  _this2.setState({
                    isOpenedByButton: false
                  });
                }
                if (e.target.value.trim() === '') {
                  // Prevent the selected item from sticking around
                  clearSelection();
                }
              }
            })))),
            _react2.default.createElement(_buttons.IconButton, _extends({
              iconAim: 'down',
              color: 'muted',
              icon: 'triangle',
              appearance: appearance,
              height: height,
              marginLeft: -1,
              paddingLeft: 0,
              paddingRight: 0,
              borderTopLeftRadius: 0,
              borderBottomLeftRadius: 0
            }, getButtonProps(_extends({}, buttonProps, {
              onClick: function onClick() {
                if (!isShown) {
                  _this2.setState({ isOpenedByButton: true });
                }
              }
            }))))
          );
        }
      );
    }
  }]);

  return Combobox;
}(_react.PureComponent);

Combobox.propTypes = _extends({}, _uiBox.dimensions.propTypes, _uiBox.spacing.propTypes, _uiBox.position.propTypes, _uiBox.layout.propTypes, {

  /**
   * The options to show in the menu.
   */
  items: _propTypes2.default.array.isRequired,

  /**
   * The selected item when controlled.
   */
  selectedItem: _propTypes2.default.any,

  /**
   * Function called when value changes.
   */
  onChange: _propTypes2.default.func,

  /**
   * When true, open the autocomplete on focus.
   */
  openOnFocus: _propTypes2.default.bool,

  /**
   * Default selected item when uncontrolled.
   */
  defaultSelectedItem: _propTypes2.default.any,

  /**
   * The placeholder text when there is no value present.
   */
  placeholder: _propTypes2.default.string,

  /**
   * In case the array of items is not an array of strings,
   * this function is used on each item to return the string that will be shown on the filter
   */
  itemToString: _propTypes2.default.func,

  /**
   * Properties forwarded to the input. Use with caution.
   */
  inputProps: _propTypes2.default.object,

  /**
   * Properties forwarded to the button. Use with caution.
   */
  buttonProps: _propTypes2.default.object,

  /**
   * Properties forwarded to the autocomplete component. Use with caution.
   */
  autocompleteProps: _propTypes2.default.object
});
Combobox.defaultProps = {
  width: 240,
  openOnFocus: false,
  appearance: 'default'
};
exports.default = Combobox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,