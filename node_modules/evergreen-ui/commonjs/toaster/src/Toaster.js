'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _ToastManager = require('./ToastManager');

var _ToastManager2 = _interopRequireDefault(_ToastManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ID = 'evergreen-toaster';
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';

/**
 * The Toaster manages the interactionsb between
 * the ToasterManger and the toast API.
 */

var Toaster = function Toaster() {
  var _this = this;

  _classCallCheck(this, Toaster);

  this._bindNotify = function (handler) {
    _this.notifyHandler = handler;
  };

  this._bindGetToasts = function (handler) {
    _this.getToastsHandler = handler;
  };

  this._bindCloseAll = function (handler) {
    _this.closeAllHandler = handler;
  };

  this.getToasts = function () {
    return _this.getToastsHandler();
  };

  this.closeAll = function () {
    return _this.closeAllHandler();
  };

  this.notify = function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return _this.notifyHandler(title, _extends({}, settings, { type: 'default' }));
  };

  this.success = function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return _this.notifyHandler(title, _extends({}, settings, { type: 'success' }));
  };

  this.warning = function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return _this.notifyHandler(title, _extends({}, settings, { type: 'warning' }));
  };

  this.danger = function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return _this.notifyHandler(title, _extends({}, settings, { type: 'danger' }));
  };

  this.info = function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return _this.notifyHandler(title, _extends({}, settings, { type: 'info' }));
  };

  if (!isBrowser) return;
  var container = void 0;

  var element = document.getElementById(ID);
  if (element) {
    container = element;
  } else {
    // Create container if not exists yet.
    container = document.createElement('div');
    container.id = ID;
    document.body.appendChild(container);
  }

  _reactDom2.default.render(_react2.default.createElement(_ToastManager2.default, {
    bindNotify: this._bindNotify,
    bindGetToasts: this._bindGetToasts,
    bindCloseAll: this._bindCloseAll
  }), container);
};

exports.default = Toaster;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdGVyLmpzIl0sIm5hbWVzIjpbIklEIiwiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJUb2FzdGVyIiwiX2JpbmROb3RpZnkiLCJub3RpZnlIYW5kbGVyIiwiaGFuZGxlciIsIl9iaW5kR2V0VG9hc3RzIiwiZ2V0VG9hc3RzSGFuZGxlciIsIl9iaW5kQ2xvc2VBbGwiLCJjbG9zZUFsbEhhbmRsZXIiLCJnZXRUb2FzdHMiLCJjbG9zZUFsbCIsIm5vdGlmeSIsInRpdGxlIiwic2V0dGluZ3MiLCJ0eXBlIiwic3VjY2VzcyIsIndhcm5pbmciLCJkYW5nZXIiLCJpbmZvIiwiY29udGFpbmVyIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFNQSxLQUFLLG1CQUFYO0FBQ0EsSUFBTUMsWUFDSixPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDLE9BQU9BLE9BQU9DLFFBQWQsS0FBMkIsV0FEOUQ7O0FBR0E7Ozs7O0lBSXFCQyxPLEdBQ25CLG1CQUFjO0FBQUE7O0FBQUE7O0FBQUEsT0F3QmRDLFdBeEJjLEdBd0JBLG1CQUFXO0FBQ3ZCLFVBQUtDLGFBQUwsR0FBcUJDLE9BQXJCO0FBQ0QsR0ExQmE7O0FBQUEsT0E0QmRDLGNBNUJjLEdBNEJHLG1CQUFXO0FBQzFCLFVBQUtDLGdCQUFMLEdBQXdCRixPQUF4QjtBQUNELEdBOUJhOztBQUFBLE9BZ0NkRyxhQWhDYyxHQWdDRSxtQkFBVztBQUN6QixVQUFLQyxlQUFMLEdBQXVCSixPQUF2QjtBQUNELEdBbENhOztBQUFBLE9Bb0NkSyxTQXBDYyxHQW9DRixZQUFNO0FBQ2hCLFdBQU8sTUFBS0gsZ0JBQUwsRUFBUDtBQUNELEdBdENhOztBQUFBLE9Bd0NkSSxRQXhDYyxHQXdDSCxZQUFNO0FBQ2YsV0FBTyxNQUFLRixlQUFMLEVBQVA7QUFDRCxHQTFDYTs7QUFBQSxPQTRDZEcsTUE1Q2MsR0E0Q0wsVUFBQ0MsS0FBRCxFQUEwQjtBQUFBLFFBQWxCQyxRQUFrQix1RUFBUCxFQUFPOztBQUNqQyxXQUFPLE1BQUtWLGFBQUwsQ0FBbUJTLEtBQW5CLGVBQStCQyxRQUEvQixJQUF5Q0MsTUFBTSxTQUEvQyxJQUFQO0FBQ0QsR0E5Q2E7O0FBQUEsT0FnRGRDLE9BaERjLEdBZ0RKLFVBQUNILEtBQUQsRUFBMEI7QUFBQSxRQUFsQkMsUUFBa0IsdUVBQVAsRUFBTzs7QUFDbEMsV0FBTyxNQUFLVixhQUFMLENBQW1CUyxLQUFuQixlQUErQkMsUUFBL0IsSUFBeUNDLE1BQU0sU0FBL0MsSUFBUDtBQUNELEdBbERhOztBQUFBLE9Bb0RkRSxPQXBEYyxHQW9ESixVQUFDSixLQUFELEVBQTBCO0FBQUEsUUFBbEJDLFFBQWtCLHVFQUFQLEVBQU87O0FBQ2xDLFdBQU8sTUFBS1YsYUFBTCxDQUFtQlMsS0FBbkIsZUFBK0JDLFFBQS9CLElBQXlDQyxNQUFNLFNBQS9DLElBQVA7QUFDRCxHQXREYTs7QUFBQSxPQXdEZEcsTUF4RGMsR0F3REwsVUFBQ0wsS0FBRCxFQUEwQjtBQUFBLFFBQWxCQyxRQUFrQix1RUFBUCxFQUFPOztBQUNqQyxXQUFPLE1BQUtWLGFBQUwsQ0FBbUJTLEtBQW5CLGVBQStCQyxRQUEvQixJQUF5Q0MsTUFBTSxRQUEvQyxJQUFQO0FBQ0QsR0ExRGE7O0FBQUEsT0E0RGRJLElBNURjLEdBNERQLFVBQUNOLEtBQUQsRUFBMEI7QUFBQSxRQUFsQkMsUUFBa0IsdUVBQVAsRUFBTzs7QUFDL0IsV0FBTyxNQUFLVixhQUFMLENBQW1CUyxLQUFuQixlQUErQkMsUUFBL0IsSUFBeUNDLE1BQU0sTUFBL0MsSUFBUDtBQUNELEdBOURhOztBQUNaLE1BQUksQ0FBQ2hCLFNBQUwsRUFBZ0I7QUFDaEIsTUFBSXFCLGtCQUFKOztBQUVBLE1BQU1DLFVBQVVwQixTQUFTcUIsY0FBVCxDQUF3QnhCLEVBQXhCLENBQWhCO0FBQ0EsTUFBSXVCLE9BQUosRUFBYTtBQUNYRCxnQkFBWUMsT0FBWjtBQUNELEdBRkQsTUFFTztBQUNMO0FBQ0FELGdCQUFZbkIsU0FBU3NCLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjtBQUNBSCxjQUFVSSxFQUFWLEdBQWUxQixFQUFmO0FBQ0FHLGFBQVN3QixJQUFULENBQWNDLFdBQWQsQ0FBMEJOLFNBQTFCO0FBQ0Q7O0FBRUQscUJBQVNPLE1BQVQsQ0FDRTtBQUNFLGdCQUFZLEtBQUt4QixXQURuQjtBQUVFLG1CQUFlLEtBQUtHLGNBRnRCO0FBR0Usa0JBQWMsS0FBS0U7QUFIckIsSUFERixFQU1FWSxTQU5GO0FBUUQsQzs7a0JBdkJrQmxCLE8iLCJmaWxlIjoiVG9hc3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgVG9hc3RNYW5hZ2VyIGZyb20gJy4vVG9hc3RNYW5hZ2VyJ1xuXG5jb25zdCBJRCA9ICdldmVyZ3JlZW4tdG9hc3RlcidcbmNvbnN0IGlzQnJvd3NlciA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbi8qKlxuICogVGhlIFRvYXN0ZXIgbWFuYWdlcyB0aGUgaW50ZXJhY3Rpb25zYiBiZXR3ZWVuXG4gKiB0aGUgVG9hc3Rlck1hbmdlciBhbmQgdGhlIHRvYXN0IEFQSS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9hc3RlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICghaXNCcm93c2VyKSByZXR1cm5cbiAgICBsZXQgY29udGFpbmVyXG5cbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoSUQpXG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lciBpZiBub3QgZXhpc3RzIHlldC5cbiAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBjb250YWluZXIuaWQgPSBJRFxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpXG4gICAgfVxuXG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgPFRvYXN0TWFuYWdlclxuICAgICAgICBiaW5kTm90aWZ5PXt0aGlzLl9iaW5kTm90aWZ5fVxuICAgICAgICBiaW5kR2V0VG9hc3RzPXt0aGlzLl9iaW5kR2V0VG9hc3RzfVxuICAgICAgICBiaW5kQ2xvc2VBbGw9e3RoaXMuX2JpbmRDbG9zZUFsbH1cbiAgICAgIC8+LFxuICAgICAgY29udGFpbmVyXG4gICAgKVxuICB9XG5cbiAgX2JpbmROb3RpZnkgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLm5vdGlmeUhhbmRsZXIgPSBoYW5kbGVyXG4gIH1cblxuICBfYmluZEdldFRvYXN0cyA9IGhhbmRsZXIgPT4ge1xuICAgIHRoaXMuZ2V0VG9hc3RzSGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIF9iaW5kQ2xvc2VBbGwgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLmNsb3NlQWxsSGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIGdldFRvYXN0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRUb2FzdHNIYW5kbGVyKClcbiAgfVxuXG4gIGNsb3NlQWxsID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmNsb3NlQWxsSGFuZGxlcigpXG4gIH1cblxuICBub3RpZnkgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCB0eXBlOiAnZGVmYXVsdCcgfSlcbiAgfVxuXG4gIHN1Y2Nlc3MgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCB0eXBlOiAnc3VjY2VzcycgfSlcbiAgfVxuXG4gIHdhcm5pbmcgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCB0eXBlOiAnd2FybmluZycgfSlcbiAgfVxuXG4gIGRhbmdlciA9ICh0aXRsZSwgc2V0dGluZ3MgPSB7fSkgPT4ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUhhbmRsZXIodGl0bGUsIHsgLi4uc2V0dGluZ3MsIHR5cGU6ICdkYW5nZXInIH0pXG4gIH1cblxuICBpbmZvID0gKHRpdGxlLCBzZXR0aW5ncyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5SGFuZGxlcih0aXRsZSwgeyAuLi5zZXR0aW5ncywgdHlwZTogJ2luZm8nIH0pXG4gIH1cbn1cbiJdfQ==