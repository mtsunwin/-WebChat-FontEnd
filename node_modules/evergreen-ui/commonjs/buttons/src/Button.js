'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _typography = require('../../typography');

var _icons = require('../../icons');

var _sharedStyles = require('../../shared-styles');

var _spinner = require('../../spinner');

var _ButtonAppearances = require('./styles/ButtonAppearances');

var _ButtonAppearances2 = _interopRequireDefault(_ButtonAppearances);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Button = function (_PureComponent) {
  _inherits(Button, _PureComponent);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          css = _props.css,
          height = _props.height,
          isActive = _props.isActive,
          children = _props.children,
          disabled = _props.disabled,
          appearance = _props.appearance,
          isLoading = _props.isLoading,
          paddingRight = _props.paddingRight,
          paddingLeft = _props.paddingLeft,
          paddingTop = _props.paddingTop,
          paddingBottom = _props.paddingBottom,
          iconBeforeKey = _props.iconBefore,
          iconBeforeAim = _props.iconBeforeAim,
          iconAfterKey = _props.iconAfter,
          iconAfterAim = _props.iconAfterAim,
          props = _objectWithoutProperties(_props, ['css', 'height', 'isActive', 'children', 'disabled', 'appearance', 'isLoading', 'paddingRight', 'paddingLeft', 'paddingTop', 'paddingBottom', 'iconBefore', 'iconBeforeAim', 'iconAfter', 'iconAfterAim']);

      var appearanceStyle = _ButtonAppearances2.default[appearance];
      var textStyle = (0, _sharedStyles.getTextStyleForControlHeight)({ height: height });
      var borderRadius = (0, _sharedStyles.getBorderRadiusForControlHeight)({ height: height });
      var iconHeight = height - 4;
      var iconSize = (0, _sharedStyles.getIconSizeForControlHeight)({ height: iconHeight });

      var pr = paddingRight !== undefined ? paddingRight : Math.round(height / 2); // eslint-disable-line no-negated-condition
      var pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2); // eslint-disable-line no-negated-condition

      var iconBefore = void 0;
      if (iconBeforeKey) {
        iconBefore = _react2.default.createElement(_icons.IconMap[iconBeforeKey], {
          aim: iconBeforeAim,
          iconSize: iconSize,
          color: 'inherit',
          size: iconHeight,
          marginLeft: -Math.round(pl * 0.6)
        });
      }

      var iconAfter = void 0;
      if (iconAfterKey) {
        iconAfter = _react2.default.createElement(_icons.IconMap[iconAfterKey], {
          aim: iconAfterAim,
          iconSize: iconSize,
          color: 'inherit',
          size: iconHeight,
          marginRight: -Math.round(pl * 0.6)
        });
      }

      return _react2.default.createElement(
        _typography.Text,
        _extends({
          is: 'button',
          borderTopRightRadius: borderRadius,
          borderBottomRightRadius: borderRadius,
          borderTopLeftRadius: borderRadius,
          borderBottomLeftRadius: borderRadius,
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingRight: pr,
          paddingLeft: pl,
          margin: 0 // Removes weird margins in Safari
        }, textStyle, {
          color: null // Prevent the Text color overriding the glamor appearanceStyle color
          , css: _extends({}, appearanceStyle, css),
          height: height,
          lineHeight: height + 'px'
        }, isActive ? { 'data-active': true } : {}, Button.styles, props, {
          disabled: disabled || isLoading
        }),
        isLoading && _react2.default.createElement(_spinner.Spinner, {
          marginLeft: -Math.round(height / 8),
          marginRight: Math.round(height / 4),
          size: Math.round(height / 2)
        }),
        iconBefore || null,
        children,
        iconAfter || null
      );
    }
  }]);

  return Button;
}(_react.PureComponent);

Button.propTypes = _extends({}, _typography.Text.propTypes, {

  /**
   * The appearance of the button.
   */
  appearance: _propTypes2.default.oneOf(Object.keys(_ButtonAppearances2.default)).isRequired,

  /**
   * When true, show a loading spinner before the children.
   * This also disables the button.
   */
  isLoading: _propTypes2.default.bool,

  /**
   * Forcefully set the active state of a button.
   * Useful in conjuction with a Popover.
   */
  isActive: _propTypes2.default.bool,

  /**
   * Sets an icon before the text. Can be any icon from Evergreen.
   */
  iconBefore: _propTypes2.default.oneOf(Object.keys(_icons.IconMap)),

  /**
   * The aim of the left icon. Not a big use case for this.
   */
  iconBeforeAim: _propTypes2.default.oneOf(Object.keys(_icons.IconAim)),

  /**
   * Sets an icon after the text. Can be any icon from Evergreen.
   */
  iconAfter: _propTypes2.default.oneOf(Object.keys(_icons.IconMap)),

  /**
   * The aim of the right icon. Useful to aim a triangle down.
   */
  iconAfterAim: _propTypes2.default.oneOf(Object.keys(_icons.IconAim)),

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: _propTypes2.default.bool
});
Button.defaultProps = {
  appearance: 'default',
  isActive: false,
  iconBeforeAim: 'none',
  iconAfterAim: 'none',
  height: 32,
  paddingTop: 0,
  paddingBottom: 0
};
Button.styles = {
  position: 'relative',
  fontFamily: 'ui',
  fontWeight: 500,
  display: 'inline-flex',
  alignItems: 'center',
  flexWrap: 'nowrap'
};
exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,