'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uiBox = require('ui-box');

var _layers = require('../../layers');

var _typography = require('../../typography');

var _overlay = require('../../overlay');

var _buttons = require('../../buttons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var animationEasing = {
  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)'
};

var ANIMATION_DURATION = 200;

var openAnimation = _uiBox.css.keyframes('openAnimation', {
  from: {
    transform: 'scale(0.8)',
    opacity: 0
  },
  to: {
    transform: 'scale(1)',
    opacity: 1
  }
});

var closeAnimation = _uiBox.css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.8)',
    opacity: 0
  }
});

var animationStyles = {
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: openAnimation + ' ' + ANIMATION_DURATION + 'ms ' + animationEasing.deceleration + ' both'
  },
  '&[data-state="exiting"]': {
    animation: closeAnimation + ' ' + ANIMATION_DURATION + 'ms ' + animationEasing.acceleration + ' both'
  }
};

var Dialog = function (_React$Component) {
  _inherits(Dialog, _React$Component);

  function Dialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call.apply(_ref, [this].concat(args))), _this), _this.renderChildren = function (close) {
      var children = _this.props.children;


      if (typeof children === 'function') {
        return children({ close: close });
      } else if (typeof children === 'string') {
        return _react2.default.createElement(
          _typography.Paragraph,
          null,
          children
        );
      }
      return children;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dialog, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          title = _props.title,
          width = _props.width,
          type = _props.type,
          isShown = _props.isShown,
          topOffset = _props.topOffset,
          hasHeader = _props.hasHeader,
          hasFooter = _props.hasFooter,
          hasCancel = _props.hasCancel,
          onCloseComplete = _props.onCloseComplete,
          onOpenComplete = _props.onOpenComplete,
          onConfirm = _props.onConfirm,
          confirmLabel = _props.confirmLabel,
          isConfirmLoading = _props.isConfirmLoading,
          isConfirmDisabled = _props.isConfirmDisabled,
          cancelLabel = _props.cancelLabel,
          containerProps = _props.containerProps,
          minHeightContent = _props.minHeightContent;


      var maxHeight = void 0;
      if (Number.isInteger(topOffset)) {
        maxHeight = 'calc(100vh - ' + topOffset + 'px)';
      } else {
        maxHeight = 'calc(100vh - ' + topOffset + ')';
      }

      var buttonAppearance = void 0;
      if (type === 'default') {
        buttonAppearance = 'green';
      } else if (type === 'danger') {
        buttonAppearance = 'red';
      }

      return _react2.default.createElement(
        _overlay.Overlay,
        {
          isShown: isShown,
          onExited: onCloseComplete,
          onEntered: onOpenComplete
        },
        function (_ref2) {
          var state = _ref2.state,
              close = _ref2.close;
          return _react2.default.createElement(
            _layers.Pane,
            {
              boxSizing: 'border-box',
              display: 'flex',
              justifyContent: 'center',
              paddingTop: topOffset,
              maxHeight: maxHeight
            },
            _react2.default.createElement(
              _layers.Pane,
              _extends({
                role: 'dialog',
                backgroundColor: 'white',
                elevation: 4,
                borderRadius: 8,
                width: width,
                display: 'flex',
                flexDirection: 'column',
                css: animationStyles,
                'data-state': state
              }, containerProps),
              hasHeader && _react2.default.createElement(
                _layers.Pane,
                {
                  padding: 16,
                  flexShrink: 0,
                  borderBottom: 'extraMuted',
                  display: 'flex',
                  alignItems: 'center'
                },
                _react2.default.createElement(
                  _typography.Heading,
                  { is: 'h4', size: 600, flex: '1' },
                  title
                ),
                _react2.default.createElement(_buttons.IconButton, { appearance: 'ghost', icon: 'close', onClick: close })
              ),
              _react2.default.createElement(
                _layers.Pane,
                {
                  'data-state': state,
                  display: 'flex',
                  overflowY: 'auto',
                  padding: 16,
                  flexDirection: 'column',
                  minHeight: minHeightContent
                },
                _react2.default.createElement(
                  _layers.Pane,
                  null,
                  _this2.renderChildren(close)
                )
              ),
              hasFooter && _react2.default.createElement(
                _layers.Pane,
                {
                  borderTop: 'extraMuted',
                  flexShrink: 0,
                  padding: 16,
                  display: 'flex',
                  justifyContent: 'flex-end'
                },
                hasCancel && _react2.default.createElement(
                  _buttons.Button,
                  { tabIndex: 0, onClick: close },
                  cancelLabel
                ),
                _react2.default.createElement(
                  _buttons.Button,
                  {
                    tabIndex: 0,
                    marginLeft: 8,
                    appearance: buttonAppearance,
                    isLoading: isConfirmLoading,
                    disabled: isConfirmDisabled,
                    onClick: function onClick() {
                      return onConfirm(close);
                    }
                  },
                  confirmLabel
                )
              )
            )
          );
        }
      );
    }
  }]);

  return Dialog;
}(_react2.default.Component);

Dialog.propTypes = {
  /**
   * Children can be a string, node or a function accepting `({ close })`.
   * When passing a string, <Paragraph /> is used to wrap the string.
   */
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]).isRequired,

  /**
   * When true, the dialog is shown.
   */
  isShown: _propTypes2.default.bool,

  /**
   * Title of the Dialog. Titles should use Title Case.
   */
  title: _propTypes2.default.node,

  /**
   * When true, the header with the title and close icon button is shown.
   */
  hasHeader: _propTypes2.default.bool,

  /**
   * When true, the footer with the cancel and confirm button is shown.
   */
  hasFooter: _propTypes2.default.bool,

  /**
   * When true, the cancel button is shown.
   */
  hasCancel: _propTypes2.default.bool,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: _propTypes2.default.func,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: _propTypes2.default.func,

  /**
   * Function that will be called when the confirm button is clicked.
   * This does not close the Dialog. A close function will be passed
   * as a paramater you can use to close the dialog.
   *
   * `onConfirm={(close) => close()}`
   */
  onConfirm: _propTypes2.default.func,

  /**
   * Label of the confirm button.
   */
  confirmLabel: _propTypes2.default.string,

  /**
   * The type of the message.
   */
  type: _propTypes2.default.oneOf(['default', 'danger']),

  /**
   * When true, the confirm button is set to loading.
   */
  isConfirmLoading: _propTypes2.default.bool,

  /**
   * When true, the confirm button is set to disabled.
   */
  isConfirmDisabled: _propTypes2.default.bool,

  /**
   * Function that will be called when the cancel button is clicked.
   * This closes the Dialog by default.
   *
   * `onCancel={(close) => close()}`
   */
  onCancel: _propTypes2.default.func,

  /**
   * Label of the cancel button.
   */
  cancelLabel: _propTypes2.default.string,

  /**
   * Width of the Dialog.
   */
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

  /**
   * The space above the dialog.
   * This offset is also used at the bottom when there is not enough space
   * available on screen — and the dialog scrolls internally.
   */
  topOffset: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

  /**
   * The min height of the body content.
   * Makes it less weird when only showing little content.
   */
  minHeightContent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

  /**
   * Props that are passed to the dialog container.
   */
  containerProps: _propTypes2.default.object
};
Dialog.defaultProps = {
  isShown: false,
  hasHeader: true,
  hasFooter: true,
  hasCancel: true,
  type: 'default',
  width: 560,
  topOffset: '12vh',
  minHeightContent: 80,
  confirmLabel: 'Confirm',
  isConfirmLoading: false,
  isConfirmDisabled: false,
  cancelLabel: 'Cancel',
  onCancel: function onCancel(close) {
    return close();
  },
  onConfirm: function onConfirm(close) {
    return close();
  }
};
exports.default = Dialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,